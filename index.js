const { Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType, PermissionFlagsBits, SlashCommandBuilder, REST, Routes, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });
const axios = require('axios'); // Pot≈ôebujeme pro vol√°n√≠ API
const { google } = require('googleapis');
require('dotenv').config();

// ===== KONFIGURACE SYST√âMU P≈òIHL√Å≈†EK =====
const CONFIG = {
    APPLICATION_CHANNEL_ID: '1418605324394303519', // Kan√°l s embedem p≈ôihl√°≈°ek
    ADMIN_ROLE_ID: '1418603886218051635', // ‚≠ê Veden√≠
    EMPLOYEE_ROLE_ID: '1418604088693882900', // üëî Zamƒõstnanec
    CATEGORY_ID: '1418606519494246400', // Kategorie pro ticket kan√°ly s p≈ôihl√°≈°kami
    DISPATCHER_CHANNEL_ID: '1418624695829532764', // Kan√°l pro zpr√°vy o j√≠zd√°ch (dispatcher)
    ACTIVE_RIDES_CHANNEL_ID: '1419230177585528842', // Kan√°l pro live tracking aktivn√≠ch j√≠zd
    
    // Role pozic (budete muset p≈ôidat skuteƒçn√© ID rol√≠)
    STROJVUDCE_ROLE_ID: '1418875308811223123', // üöÇ Strojv≈Ødce
    VYPRAVCI_ROLE_ID: '1418875376855158825', // üöâ V√Ωpravƒç√≠
    
    // Syst√©m zak√°zek
    ZAKAZKY_SETUP_CHANNEL_ID: '1418966879330111508', // Kan√°l kde se vytvo≈ô√≠ embed pro zak√°zky
    ZAKAZKY_CATEGORY_ID: '1418968983629074574', // Kategorie pro zak√°zkov√© kan√°ly
    ZAKAZKY_LOG_CATEGORY_ID: '1418969133936279623' // Kategorie pro log dokonƒçen√Ωch zak√°zek
};

// ===== GOOGLE SHEETS KONFIGURACE =====
const SHEETS_CONFIG = {
    SPREADSHEET_ID: process.env.GOOGLE_SHEETS_ID, // ID va≈°√≠ tabulky
    RANGE: 'List 1!A:H' // Rozsah pro z√°pis dat
};

// Autentifikace pro Google Sheets
let sheetsAuth = null;
let sheets = null;

async function initializeGoogleSheets() {
    try {
        console.log('üîç Zaƒç√°tek inicializace Google Sheets...');
        
        if (!process.env.GOOGLE_CREDENTIALS) {
            console.log('‚ö†Ô∏è Google Sheets credentials nejsou nastaven√©');
            return false;
        }
        
        console.log('üîç Parsing JSON credentials...');
        const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);
        console.log('‚úÖ JSON credentials √∫spƒõ≈°nƒõ parsov√°ny');
        
        console.log('üîç Vytv√°≈ô√≠m Google Auth...');
        sheetsAuth = new google.auth.GoogleAuth({
            credentials: credentials,
            scopes: ['https://www.googleapis.com/auth/spreadsheets']
        });
        console.log('‚úÖ Google Auth vytvo≈ôen');

        console.log('üîç Vytv√°≈ô√≠m Sheets API klienta...');
        sheets = google.sheets({ version: 'v4', auth: sheetsAuth });
        console.log('‚úÖ Google Sheets p≈ôipojeno √∫spƒõ≈°nƒõ!');
        return true;
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi p≈ôipojov√°n√≠ k Google Sheets:', error.message);
        return false;
    }
}

// Funkce pro z√°pis j√≠zdy do Google Sheets
async function zapisiJizduDoSheets(jizda, userName) {
    try {
        if (!sheets || !SHEETS_CONFIG.SPREADSHEET_ID) {
            console.log('‚ö†Ô∏è Google Sheets nen√≠ nakonfigurov√°no');
            return false;
        }

        const datum = new Date().toLocaleDateString('cs-CZ');
        const cas = new Date().toLocaleTimeString('cs-CZ');
        
        const radek = [
            datum,                    // A - Datum
            cas,                      // B - ƒåas
            userName,                 // C - U≈æivatel
            jizda.vlakCislo,         // D - Vlak
            jizda.trasa,             // E - Trasa
            jizda.doba + ' min',     // F - Doba trv√°n√≠
            jizda.body,              // G - Body
            '' // H - Pozn√°mky (pr√°zdn√©)
        ];

        await sheets.spreadsheets.values.append({
            spreadsheetId: SHEETS_CONFIG.SPREADSHEET_ID,
            range: SHEETS_CONFIG.RANGE,
            valueInputOption: 'RAW',
            requestBody: {
                values: [radek]
            }
        });

        console.log(`‚úÖ J√≠zda ${jizda.vlakCislo} zaps√°na do Google Sheets`);
        return true;
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi z√°pisu do Google Sheets:', error);
        return false;
    }
}

// √ölo≈æi≈°tƒõ pro aktivn√≠ p≈ôihl√°≈°ky
const activeApplications = new Map();

// √ölo≈æi≈°tƒõ pro aktivn√≠ zak√°zky
const activeZakazky = new Map(); // zakazkaId -> { channelId, vypravci, assignedUser, vlakCislo, created }

// ===== DATAB√ÅZE PRO SLEDOV√ÅN√ç J√çZD =====
const aktivniJizdy = new Map(); // userId -> { vlakCislo, startCas, startStanice, cilStanice, trainName, trackingMessageId, trackingChannelId }
const dokonceneJizdy = new Map(); // userId -> [ {vlakCislo, startCas, konecCas, doba, trasa, body} ]
const userStats = new Map(); // userId -> { celkoveBody, uroven, streak, posledniJizda }

// Bodovac√≠ syst√©m
const BODOVANI = {
    ZAKLADNI_BODY: 10,
    BONUS_ZA_5MIN: 1,
    BONUS_DLOUHA_JIZDA: 5, // nad 60 minut
    STREAK_BONUS: 2,
    DENNI_BONUS: 5,
    VIP_BONUS: 10
};

const UROVNE = [
    { nazev: "ü•â Zaƒç√°teƒçn√≠k", min: 0, max: 99 },
    { nazev: "ü•à Zku≈°en√Ω", min: 100, max: 299 },
    { nazev: "ü•á Expert", min: 300, max: 599 },
    { nazev: "üíé Mistr", min: 600, max: 9999 }
];

// Funkce pro z√≠sk√°n√≠ u≈æivatelsk√Ωch statistik
function getUserStats(userId) {
    if (!userStats.has(userId)) {
        userStats.set(userId, {
            celkoveBody: 0,
            uroven: "ü•â Zaƒç√°teƒçn√≠k",
            streak: 0,
            posledniJizda: null,
            celkoveJizdy: 0,
            celkovyCas: 0
        });
    }
    return userStats.get(userId);
}

// Funkce pro v√Ωpoƒçet bod≈Ø
function vypocitejBody(dobaTrvani, trainName = "", isStreak = false, isDenni = false) {
    let body = BODOVANI.ZAKLADNI_BODY;
    
    // ƒåasov√Ω bonus
    body += Math.floor(dobaTrvani / 5) * BODOVANI.BONUS_ZA_5MIN;
    
    // Bonus za dlouhou j√≠zdu
    if (dobaTrvani >= 60) {
        body += BODOVANI.BONUS_DLOUHA_JIZDA;
    }
    
    // VIP vlaky bonus
    if (trainName && (trainName.includes('IC') || trainName.includes('EC') || trainName.includes('RJ'))) {
        body += BODOVANI.VIP_BONUS;
    }
    
    // Streak bonus
    if (isStreak) {
        body += BODOVANI.STREAK_BONUS;
    }
    
    // Denn√≠ bonus
    if (isDenni) {
        body += BODOVANI.DENNI_BONUS;
    }
    
    return body;
}

// Funkce pro aktualizaci √∫rovnƒõ
function aktualizujUroven(userId, novyPocetBodu) {
    const stats = getUserStats(userId);
    stats.celkoveBody = novyPocetBodu;
    
    for (const uroven of UROVNE) {
        if (novyPocetBodu >= uroven.min && novyPocetBodu <= uroven.max) {
            stats.uroven = uroven.nazev;
            break;
        }
    }
    
    return stats.uroven;
}

// ===== REGISTRACE SLASH P≈ò√çKAZ≈Æ =====
const commands = [
    new SlashCommandBuilder()
        .setName('ozn√°men√≠')
        .setDescription('Po≈°le hezk√© ozn√°men√≠ do vybran√©ho kan√°lu (pouze pro adminy)')
        .addChannelOption(option =>
            option.setName('kan√°l')
                .setDescription('Kan√°l kam poslat ozn√°men√≠')
                .setRequired(true)
                .addChannelTypes(ChannelType.GuildText)
        )
        .addStringOption(option =>
            option.setName('text')
                .setDescription('Text ozn√°men√≠')
                .setRequired(true)
                .setMaxLength(2000)
        )
        .addStringOption(option =>
            option.setName('barva')
                .setDescription('Barva embedu')
                .setRequired(false)
                .addChoices(
                    { name: 'üîµ Modr√° (info)', value: '#0099ff' },
                    { name: 'üü¢ Zelen√° (√∫spƒõch)', value: '#00ff00' },
                    { name: 'üü° ≈Ωlut√° (upozornƒõn√≠)', value: '#ffcc00' },
                    { name: 'üî¥ ƒåerven√° (d≈Øle≈æit√©)', value: '#ff0000' },
                    { name: 'üü£ Fialov√° (ud√°losti)', value: '#9932cc' }
                )
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    new SlashCommandBuilder()
        .setName('setup-pozice')
        .setDescription('Nastav√≠ syst√©m v√Ωbƒõru pozic (strojv≈Ødce/v√Ωpravƒç√≠) - pouze pro adminy')
        .addChannelOption(option =>
            option.setName('kan√°l')
                .setDescription('Kan√°l kam poslat v√Ωbƒõr pozic')
                .setRequired(true)
                .addChannelTypes(ChannelType.GuildText)
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
];

// Registrace p≈ô√≠kaz≈Ø
async function registerCommands() {
    const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
    
    try {
        console.log('Registruji slash p≈ô√≠kazy glob√°lnƒõ...');
        
        // Zkus√≠me glob√°ln√≠ registraci (trv√° d√©le, ale m√©nƒõ probl√©m≈Ø s opr√°vnƒõn√≠mi)
        await rest.put(
            Routes.applicationCommands("1418589810012196946"), // Bot ID
            { body: commands },
        );
        
        console.log('‚úÖ Slash p≈ô√≠kazy √∫spƒõ≈°nƒõ registrov√°ny glob√°lnƒõ!');
        console.log('‚è∞ M≈Ø≈æe trvat a≈æ 1 hodinu, ne≈æ se zobraz√≠ v≈°ude.');
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi registraci p≈ô√≠kaz≈Ø:', error);
    }
}

client.on('ready', async () => {
    console.log(`Bot ${client.user.tag} je online!`);
    console.log('üöÄ Verze s Google Sheets debug a !history p≈ô√≠kazem - ' + new Date().toISOString());
    registerCommands(); // Registruj slash p≈ô√≠kazy
    
    // Debug zpr√°va
    console.log('üîç Zkou≈°√≠m inicializovat Google Sheets...');
    console.log('GOOGLE_CREDENTIALS existuje:', !!process.env.GOOGLE_CREDENTIALS);
    console.log('GOOGLE_SHEETS_ID existuje:', !!process.env.GOOGLE_SHEETS_ID);
    
    // Inicializuj Google Sheets
    await initializeGoogleSheets();
    
    // ===== SPU≈†TƒöN√ç AUTOMATICK√ùCH AKTUALIZAC√ç LIVE TRACKING =====
    console.log('üîÑ Spou≈°t√≠m automatick√© aktualizace live tracking...');
    setInterval(async () => {
        try {
            for (const [userId, jizda] of aktivniJizdy) {
                if (jizda.trackingMessageId && jizda.trackingChannelId) {
                    // Vypoƒç√≠tej aktu√°ln√≠ dobu j√≠zdy
                    const currentDuration = Math.round((Date.now() - jizda.startCas) / (1000 * 60)); // v minut√°ch
                    const estimatedDuration = jizda.estimatedDuration || 60;
                    
                    // Aktualizuj progress bar
                    const progressBar = createProgressBar(currentDuration, estimatedDuration);
                    
                    // Vytvo≈ô aktualizovan√Ω embed
                    const updatedEmbed = new EmbedBuilder()
                        .setColor('#ffff00')
                        .setTitle(`üöÇ J√≠zda vlaku ${jizda.vlakCislo}`)
                        .setDescription(progressBar)
                        .addFields(
                            { name: 'üöâ Trasa', value: `${jizda.startStanice} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ${jizda.cilStanice}`, inline: false },
                            { name: '‚è±Ô∏è Doba j√≠zdy', value: `${currentDuration}/${estimatedDuration} minut`, inline: true },
                            { name: 'üìç Aktu√°lnƒõ', value: jizda.startStanice, inline: true },
                            { name: 'üë§ Strojv≈Ødce', value: `<@${userId}>`, inline: true }
                        )
                        .setThumbnail(client.users.cache.get(userId)?.displayAvatarURL() || null)
                        .setFooter({ text: `${jizda.trainName} ‚Ä¢ Live tracking` })
                        .setTimestamp();

                    // Aktualizuj embed
                    try {
                        const channel = await client.channels.fetch(jizda.trackingChannelId);
                        const message = await channel.messages.fetch(jizda.trackingMessageId);
                        await message.edit({ embeds: [updatedEmbed] });
                        console.log(`üîÑ Aktualizov√°n live tracking pro vlak ${jizda.vlakCislo}`);
                    } catch (error) {
                        console.error(`‚ùå Chyba p≈ôi aktualizaci live tracking pro ${jizda.vlakCislo}:`, error);
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå Chyba v automatick√Ωch aktualizac√≠ch:', error);
        }
    }, 5 * 60 * 1000); // 5 minut v milisekund√°ch
});

// ===== FUNKCE PRO PROGRESS BAR A LIVE TRACKING =====
function createProgressBar(current, total) {
    const percent = Math.round((current / total) * 100);
    const filled = Math.round(percent / 6.25); // 16 symbol≈Ø max
    const empty = 16 - filled;
    return '‚îÅ'.repeat(filled) + '‚ñë'.repeat(empty) + ` ${percent}%`;
}

// P≈ôedpokl√°dan√° doba j√≠zdy (pro progress bar) - m≈Ø≈æeme roz≈°√≠≈ôit na skuteƒçn√° data z API
function getEstimatedDuration(startStation, endStation) {
    // Z√°kladn√≠ odhady - pozdƒõji m≈Ø≈æeme nahradit skuteƒçn√Ωmi daty z SimRail API
    const distances = {
        'Praha': { 'Brno': 90, 'Ostrava': 180, 'Bratislava': 120 },
        'Brno': { 'Praha': 90, 'Ostrava': 120, 'Bratislava': 90 },
        'Ostrava': { 'Praha': 180, 'Brno': 120, 'Bratislava': 150 },
        'Bratislava': { 'Praha': 120, 'Brno': 90, 'Ostrava': 150 }
    };
    
    // Zkus√≠me naj√≠t odhad, jinak pou≈æijeme default 60 minut
    if (distances[startStation] && distances[startStation][endStation]) {
        return distances[startStation][endStation];
    }
    return 60; // default 60 minut
}

client.on('messageCreate', async message => {
    if (message.author.bot) return;

    // ===== P≈ò√çKAZ !HELP =====
    if (message.content === '!help' || message.content === '!pomoc') {
        const helpEmbed = new EmbedBuilder()
            .setColor('#3498db')
            .setTitle('üìã MultiCargo Doprava - Seznam p≈ô√≠kaz≈Ø')
            .setDescription('üöÇ Kompletn√≠ seznam dostupn√Ωch p≈ô√≠kaz≈Ø')
            .addFields(
                {
                    name: 'üöÇ **Z√°kladn√≠ p≈ô√≠kazy**',
                    value: '‚Ä¢ `!jizda [ƒç√≠slo]` - zaƒç√≠t j√≠zdu vlakem\n‚Ä¢ `!konec` - ukonƒçit aktivn√≠ j√≠zdu\n‚Ä¢ `!stats` - va≈°e statistiky a body\n‚Ä¢ `!top` - ≈æeb≈ô√≠ƒçek nejlep≈°√≠ch ≈ôidiƒç≈Ø\n‚Ä¢ `!history` - historie va≈°ich j√≠zd',
                    inline: false
                },
                {
                    name: 'üó∫Ô∏è **API p≈ô√≠kazy - informace o vlac√≠ch**',
                    value: '‚Ä¢ `!vlak [ƒç√≠slo]` - kompletn√≠ info o vlaku\n‚Ä¢ `!trasa [ƒç√≠slo]` - zobraz√≠ celou trasu s ƒçasy\n‚Ä¢ `!pozice [ƒç√≠slo]` - aktu√°ln√≠ pozice vlaku\n‚Ä¢ `!stanice-info [ID]` - detaily o stanici\n‚Ä¢ `!stanice-seznam` - seznam v≈°ech stanic',
                    inline: false
                },
                {
                    name: ' **Syst√©m pozic**',
                    value: '‚Ä¢ Pou≈æijte tlaƒç√≠tka pro v√Ωbƒõr pozice\n‚Ä¢ üöÇ Strojv≈Ødce - ≈ô√≠zen√≠ vlak≈Ø\n‚Ä¢ üöâ V√Ωpravƒç√≠ - dispeƒçersk√© funkce',
                    inline: false
                },
                {
                    name: '‚öôÔ∏è **Admin p≈ô√≠kazy**',
                    value: '‚Ä¢ `!setup-aplikace` - nastavit syst√©m p≈ôihl√°≈°ek\n‚Ä¢ `!setup-pozice` - nastavit v√Ωbƒõr pozic\n‚Ä¢ `!ozn√°men√≠ [text]` - poslat ozn√°men√≠\n‚Ä¢ `/schvalit` - schv√°lit p≈ôihl√°≈°ku\n‚Ä¢ `/odm√≠tnout` - odm√≠tnout p≈ôihl√°≈°ku',
                    inline: false
                },
                {
                    name: 'üéØ **Bodov√Ω syst√©m**',
                    value: '‚Ä¢ **+10 bod≈Ø** za dokonƒçenou j√≠zdu\n‚Ä¢ **+5 bonus** za dlouh√© trasy (>50km)\n‚Ä¢ **+3 bonus** za rychl√© vlaky (>120 km/h)',
                    inline: false
                },
                {
                    name: 'üí° **Tipy**',
                    value: '‚Ä¢ Pou≈æ√≠vejte `!vlak [ƒç√≠slo]` p≈ôed zah√°jen√≠m j√≠zdy\n‚Ä¢ `!pozice [ƒç√≠slo]` pro sledov√°n√≠ pokroku\n‚Ä¢ `!stanice-info 422` pro info o Warszawa Wschodnia',
                    inline: false
                },
                {
                    name: 'üîó **U≈æiteƒçn√© odkazy**',
                    value: '‚Ä¢ [SimRail](https://simrail.eu/)\n‚Ä¢ [Google Sheets](https://docs.google.com/spreadsheets/)\n‚Ä¢ [GitHub Repo](https://github.com/)',
                    inline: false
                }
            )
            .setFooter({ text: 'MultiCargo Doprava ‚Ä¢ !help pro zobrazen√≠ n√°povƒõdy' })
            .setTimestamp();

        message.channel.send({ embeds: [helpEmbed] });
        return;
    }

    // ===== P≈ò√çKAZ PRO VYTVO≈òEN√ç SYST√âMU ZAK√ÅZEK (pouze pro adminy) =====
    if (message.content === '!setup-zakazky') {
        // Zkontroluj opr√°vnƒõn√≠ v√Ωpravƒç√≠ nebo admin
        if (!message.member.roles.cache.has(CONFIG.VYPRAVCI_ROLE_ID) && 
            !message.member.roles.cache.has(CONFIG.ADMIN_ROLE_ID) && 
            !message.member.permissions.has(PermissionFlagsBits.Administrator)) {
            message.reply('‚ùå Nem√°te opr√°vnƒõn√≠ k nastaven√≠ syst√©mu zak√°zek! Tento p≈ô√≠kaz mohou pou≈æ√≠vat pouze v√Ωpravƒç√≠.');
            return;
        }

        const zakazkyEmbed = new EmbedBuilder()
            .setColor('#e67e22')
            .setTitle('üìã Syst√©m p≈ôidƒõlov√°n√≠ zak√°zek')
            .setDescription('**V√Ωpravƒç√≠ mohou p≈ôidƒõlovat zak√°zky strojv≈Ødc≈Øm**\n\nKliknƒõte na tlaƒç√≠tko n√≠≈æe pro vytvo≈ôen√≠ nov√© zak√°zky. Vypln√≠te komu zak√°zku p≈ôidƒõlujete a ƒç√≠slo vlaku.')
            .addFields(
                { name: 'üë®‚Äçüíº Kdo m≈Ø≈æe p≈ôidƒõlovat?', value: '‚Ä¢ Pouze role **üöâ V√Ωpravƒç√≠**\n‚Ä¢ Veden√≠ a administr√°to≈ôi', inline: false },
                { name: 'üìã Jak to funguje?', value: '‚Ä¢ Kliknete na "Vytvo≈ôit zak√°zku"\n‚Ä¢ Vypln√≠te Discord ID u≈æivatele\n‚Ä¢ Zad√°te ƒç√≠slo vlaku\n‚Ä¢ Vytvo≈ô√≠ se priv√°tn√≠ kan√°l', inline: false },
                { name: 'üéØ Co se stane?', value: '‚Ä¢ U≈æivatel dostane DM notifikaci\n‚Ä¢ Otev≈ôe se mu zak√°zkov√Ω kan√°l\n‚Ä¢ Po dokonƒçen√≠ se kan√°l archivuje', inline: false }
            )
            .setThumbnail(message.guild.iconURL())
            .setFooter({ text: 'MultiCargo Doprava ‚Ä¢ Syst√©m zak√°zek' })
            .setTimestamp();

        const createButton = new ButtonBuilder()
            .setCustomId('create_zakazka')
            .setLabel('üìù Vytvo≈ôit zak√°zku')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üöÇ');

        const row = new ActionRowBuilder().addComponents(createButton);

        try {
            await message.channel.send({ embeds: [zakazkyEmbed], components: [row] });
            message.delete().catch(() => {}); // Sma≈æ p≈Øvodn√≠ p≈ô√≠kaz
        } catch (error) {
            console.error('Chyba p≈ôi vytv√°≈ôen√≠ syst√©mu zak√°zek:', error);
            message.reply('‚ùå Do≈°lo k chybƒõ p≈ôi vytv√°≈ôen√≠ syst√©mu zak√°zek.');
        }
    }

    // ===== P≈ò√çKAZ PRO VYTVO≈òEN√ç EMBED P≈òIHL√Å≈†KY (pouze pro adminy) =====
    if (message.content === '!setup-aplikace') {
        // Zkontroluj admin opr√°vnƒõn√≠
        if (!message.member.roles.cache.has(CONFIG.ADMIN_ROLE_ID) && !message.member.permissions.has(PermissionFlagsBits.Administrator)) {
            message.reply('‚ùå Nem√°te opr√°vnƒõn√≠ k nastaven√≠ syst√©mu p≈ôihl√°≈°ek!');
            return;
        }

        const applicationEmbed = new EmbedBuilder()
            .setColor('#0099ff')
            .setTitle('üöÇ P≈ôihl√°≈°ka do t√Ωmu')
            .setDescription('**Chcete se st√°t souƒç√°st√≠ na≈°eho SimRail t√Ωmu?**\n\nKliknƒõte na tlaƒç√≠tko n√≠≈æe a podejte svou p≈ôihl√°≈°ku. Vytvo≈ô√≠ se v√°m priv√°tn√≠ kan√°l, kde m≈Ø≈æete napsat d≈Øvod, proƒç se chcete p≈ôipojit.')
            .addFields(
                { name: 'üìã Co po p≈ôihl√°≈°en√≠?', value: '‚Ä¢ Z√≠sk√°te roli **üëî Zamƒõstnanec**\n‚Ä¢ P≈ô√≠stup ke speci√°ln√≠m kan√°l≈Øm\n‚Ä¢ Mo≈ænost ≈ô√≠dit vlaky s t√Ωmem', inline: false },
                { name: '‚è∞ Jak dlouho to trv√°?', value: 'Administr√°to≈ôi posoud√≠ va≈°i p≈ôihl√°≈°ku obvykle do 24 hodin.', inline: false },
                { name: 'üí° Tip', value: 'V p≈ôihl√°≈°ce uveƒète sv√© zku≈°enosti se SimRail a proƒç se chcete p≈ôipojit!', inline: false }
            )
            .setThumbnail(message.guild.iconURL())
            .setFooter({ text: 'Syst√©m p≈ôihl√°≈°ek ‚Ä¢ spoleƒçnosti MultiCargoDoprava' })
            .setTimestamp();

        const button = new ButtonBuilder()
            .setCustomId('apply_button')
            .setLabel('üìù Podat p≈ôihl√°≈°ku')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üìã');

        const row = new ActionRowBuilder().addComponents(button);

        try {
            await message.channel.send({ embeds: [applicationEmbed], components: [row] });
            message.delete().catch(() => {}); // Sma≈æ p≈Øvodn√≠ p≈ô√≠kaz
        } catch (error) {
            console.error('Chyba p≈ôi vytv√°≈ôen√≠ embed:', error);
            message.reply('‚ùå Do≈°lo k chybƒõ p≈ôi vytv√°≈ôen√≠ syst√©mu p≈ôihl√°≈°ek.');
        }
    }

    // ===== P≈ò√çKAZ !JIZDA (OPRAVENO - BEZ SPAMU) =====
    if (message.content.startsWith('!jizda')) {
        const args = message.content.slice('!jizda'.length).trim().split(' ');
        const vlakoveCislo = args[0];

        // Zkontroluj, jestli u≈æivatel zadal ƒç√≠slo vlaku
        if (!vlakoveCislo || isNaN(vlakoveCislo)) {
            message.reply('Pros√≠m, zadej platn√© ƒç√≠slo vlaku. P≈ô√≠klad: `!jizda 32922`');
            return;
        }

        // Zkontroluj, jestli u≈æ m√° aktivn√≠ j√≠zdu
        if (aktivniJizdy.has(message.author.id)) {
            const aktivni = aktivniJizdy.get(message.author.id);
            message.reply(`‚ö†Ô∏è U≈æ m√°te aktivn√≠ j√≠zdu s vlakem **${aktivni.vlakCislo}**! Nejprve ji ukonƒçete p≈ô√≠kazem \`!konecjizdy ${aktivni.vlakCislo}\``);
            return;
        }

        try {
            // Z√≠sk√°n√≠ dat z API - pou≈æ√≠v√°me ƒçesk√Ω server kter√Ω m√° vlaky
            const response = await axios.get('https://panel.simrail.eu:8084/trains-open?serverCode=cz1');
            console.log('API Response keys:', Object.keys(response.data));
            console.log('Poƒçet vlak≈Ø:', response.data.count);
            
            // Spr√°vn√° struktura API - data jsou v response.data.data
            const vlaky = response.data.data;
            
            if (!Array.isArray(vlaky)) {
                console.log('API nevr√°tilo pole vlak≈Ø:', vlaky);
                message.reply('API moment√°lnƒõ nevrac√≠ data o vlac√≠ch. Zkus to pros√≠m pozdƒõji.');
                return;
            }

            if (vlaky.length === 0) {
                message.reply('Moment√°lnƒõ nejsou na serveru ≈æ√°dn√© vlaky online. Zkus to pros√≠m pozdƒõji.');
                return;
            }

            // Najdi vlak podle ƒç√≠sla - spr√°vn√© pole je TrainNoLocal
            const hledanyVlak = vlaky.find(vlak => 
                vlak.TrainNoLocal === vlakoveCislo || 
                vlak.TrainNoLocal === parseInt(vlakoveCislo) ||
                vlak.trainNo === parseInt(vlakoveCislo) ||
                vlak.TrainNo === parseInt(vlakoveCislo)
            );

            if (hledanyVlak) {
                // Spus≈• sledov√°n√≠ j√≠zdy - nejd≈ô√≠ve vytvo≈ô live tracking embed
                const estimatedDuration = getEstimatedDuration(hledanyVlak.StartStation, hledanyVlak.EndStation);
                
                // Vytvo≈ô live tracking embed
                const liveEmbed = new EmbedBuilder()
                    .setColor('#ffff00')
                    .setTitle(`üöÇ J√≠zda vlaku ${hledanyVlak.TrainNoLocal}`)
                    .setDescription(createProgressBar(0, estimatedDuration))
                    .addFields(
                        { name: 'üöâ Trasa', value: `${hledanyVlak.StartStation} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ${hledanyVlak.EndStation}`, inline: false },
                        { name: '‚è±Ô∏è Doba j√≠zdy', value: `0/${estimatedDuration} minut`, inline: true },
                        { name: 'üìç Aktu√°lnƒõ', value: hledanyVlak.StartStation, inline: true },
                        { name: 'üë§ Strojv≈Ødce', value: message.author.toString(), inline: true }
                    )
                    .setThumbnail(message.author.displayAvatarURL())
                    .setFooter({ text: `${hledanyVlak.TrainName || 'bez n√°zvu'} ‚Ä¢ Live tracking` })
                    .setTimestamp();

                // Po≈°li live embed do kan√°lu aktivn√≠ch j√≠zd
                let trackingMessage = null;
                try {
                    const activeRidesChannel = await client.channels.fetch(CONFIG.ACTIVE_RIDES_CHANNEL_ID);
                    trackingMessage = await activeRidesChannel.send({ embeds: [liveEmbed] });
                } catch (error) {
                    console.error('Chyba p≈ôi vytv√°≈ôen√≠ live tracking embedu:', error);
                }

                // Spus≈• sledov√°n√≠ j√≠zdy s live tracking daty
                const jizda = {
                    vlakCislo: hledanyVlak.TrainNoLocal,
                    startCas: Date.now(),
                    startStanice: hledanyVlak.StartStation,
                    cilStanice: hledanyVlak.EndStation,
                    trainName: hledanyVlak.TrainName || 'bez n√°zvu',
                    estimatedDuration: estimatedDuration,
                    trackingMessageId: trackingMessage ? trackingMessage.id : null,
                    trackingChannelId: CONFIG.ACTIVE_RIDES_CHANNEL_ID
                };
                
                aktivniJizdy.set(message.author.id, jizda);
                
                // Vytvo≈ô kr√°sn√Ω embed pro zah√°jen√≠ j√≠zdy
                const startEmbed = new EmbedBuilder()
                    .setColor('#00ff00')
                    .setTitle('üöÇ J√≠zda zah√°jena!')
                    .setDescription(`Vlak **${hledanyVlak.TrainNoLocal}** je nyn√≠ v provozu`)
                    .addFields(
                        { name: 'üöâ Typ vlaku', value: hledanyVlak.TrainName || 'Bez n√°zvu', inline: true },
                        { name: 'ÔøΩ Start', value: hledanyVlak.StartStation, inline: true },
                        { name: 'üéØ C√≠l', value: hledanyVlak.EndStation, inline: true },
                        { name: 'üë§ Strojv≈Ødce', value: message.author.toString(), inline: false },
                        { name: '‚è∞ ƒåas zah√°jen√≠', value: `<t:${Math.floor(Date.now() / 1000)}:T>`, inline: true }
                    )
                    .setThumbnail(message.author.displayAvatarURL())
                    .setFooter({ text: `Vlak ƒç. ${hledanyVlak.TrainNoLocal}` })
                    .setTimestamp();

                // Po≈°li embed do centr√°ln√≠ho kan√°lu
                try {
                    const centralChannel = await client.channels.fetch(CONFIG.DISPATCHER_CHANNEL_ID);
                    await centralChannel.send({ embeds: [startEmbed] });
                } catch (error) {
                    console.error('Chyba p≈ôi odes√≠l√°n√≠ do centr√°ln√≠ho kan√°lu:', error);
                    // Fallback do p≈Øvodn√≠ho kan√°lu
                    message.reply({ embeds: [startEmbed] });
                }
            } else {
                // Uka≈æme u≈æivateli prvn√≠ch 5 dostupn√Ωch vlak≈Ø
                const dostupneVlaky = vlaky.slice(0, 5).map(vlak => vlak.TrainNoLocal).join(', ');
                message.reply(`Vlak s ƒç√≠slem **${vlakoveCislo}** nebyl nalezen.\n\nDostupn√© vlaky (prvn√≠ch 5): **${dostupneVlaky}**\n\nCelkem online vlak≈Ø: **${vlaky.length}**`);
            }

        } catch (error) {
            console.error('Do≈°lo k chybƒõ p≈ôi vol√°n√≠ API:', error);
            message.reply('Do≈°lo k chybƒõ p≈ôi z√≠sk√°v√°n√≠ dat o vlaku. Zkus to pros√≠m pozdƒõji.');
        }
    }

    // ===== P≈ò√çKAZ !KONECJIZDY (OPRAVENO - BEZ SPAMU) =====
    if (message.content.startsWith('!konecjizdy') || message.content.startsWith('!konec')) {
        const args = message.content.split(' ');
        const vlakoveCislo = args[1];

        if (!vlakoveCislo) {
            message.reply('‚ùå Zadejte ƒç√≠slo vlaku. Pou≈æit√≠: `!konecjizdy [ƒç√≠slo]`');
            return;
        }

        // Zkontroluj, jestli m√° aktivn√≠ j√≠zdu
        if (!aktivniJizdy.has(message.author.id)) {
            message.reply('‚ùå Nem√°te ≈æ√°dnou aktivn√≠ j√≠zdu! Zaƒçnƒõte j√≠zdu p≈ô√≠kazem `!jizda [ƒç√≠slo]`');
            return;
        }

        const aktivni = aktivniJizdy.get(message.author.id);

        // Zkontroluj, jestli ƒç√≠slo vlaku sed√≠
        if (aktivni.vlakCislo !== vlakoveCislo && aktivni.vlakCislo !== parseInt(vlakoveCislo)) {
            message.reply(`‚ùå M√°te aktivn√≠ j√≠zdu s vlakem **${aktivni.vlakCislo}**, ne s vlakem **${vlakoveCislo}**!`);
            return;
        }

        // Vypoƒç√≠tej d√©lku j√≠zdy
        const konecCas = Date.now();
        const dobaTrvani = Math.round((konecCas - aktivni.startCas) / (1000 * 60)); // v minut√°ch
        
        if (dobaTrvani < 1) {
            message.reply('‚ùå J√≠zda mus√≠ trvat alespo≈à 1 minutu!');
            return;
        }

        // Z√≠skej user stats
        const stats = getUserStats(message.author.id);
        const dnes = new Date().toDateString();
        const isDenni = !stats.posledniJizda || new Date(stats.posledniJizda).toDateString() !== dnes;
        const isStreak = stats.posledniJizda && (Date.now() - new Date(stats.posledniJizda).getTime()) < 24 * 60 * 60 * 1000;

        // Vypoƒç√≠tej body
        const ziskaneBody = vypocitejBody(dobaTrvani, aktivni.trainName, isStreak, isDenni);

        // Aktualizuj streak
        if (isStreak) {
            stats.streak++;
        } else {
            stats.streak = 1;
        }

        // Aktualizuj statistiky
        stats.celkoveBody += ziskaneBody;
        stats.celkoveJizdy++;
        stats.celkovyCas += dobaTrvani;
        stats.posledniJizda = Date.now();
        
        const novaUroven = aktualizujUroven(message.author.id, stats.celkoveBody);

        // Ulo≈æ dokonƒçenou j√≠zdu
        if (!dokonceneJizdy.has(message.author.id)) {
            dokonceneJizdy.set(message.author.id, []);
        }
        
        const dokoncenaJizda = {
            vlakCislo: aktivni.vlakCislo,
            startCas: aktivni.startCas,
            konecCas: konecCas,
            doba: dobaTrvani,
            trasa: `${aktivni.startStanice} ‚Üí ${aktivni.cilStanice}`,
            trainName: aktivni.trainName,
            body: ziskaneBody,
            datum: new Date().toLocaleDateString('cs-CZ')
        };
        
        dokonceneJizdy.get(message.author.id).push(dokoncenaJizda);

        // Zapi≈° j√≠zdu do Google Sheets
        await zapisiJizduDoSheets(dokoncenaJizda, message.author.username);

        // Sma≈æ live tracking embed p≈ôed ukonƒçen√≠m j√≠zdy
        try {
            if (aktivni.trackingMessageId && aktivni.trackingChannelId) {
                const trackingChannel = await client.channels.fetch(aktivni.trackingChannelId);
                const trackingMessage = await trackingChannel.messages.fetch(aktivni.trackingMessageId);
                await trackingMessage.delete();
                console.log(`üóëÔ∏è Smaz√°n live tracking embed pro vlak ${aktivni.vlakCislo}`);
            }
        } catch (error) {
            console.error('‚ùå Chyba p≈ôi maz√°n√≠ live tracking embedu:', error);
        }

        // Odstra≈à aktivn√≠ j√≠zdu
        aktivniJizdy.delete(message.author.id);

        // Vytvo≈ô kr√°sn√Ω embed pro ukonƒçen√≠ j√≠zdy
        const endEmbed = new EmbedBuilder()
            .setColor('#ff6b6b')
            .setTitle('üèÅ J√≠zda ukonƒçena!')
            .setDescription(`Vlak **${aktivni.vlakCislo}** √∫spƒõ≈°nƒõ dokonƒçil j√≠zdu`)
            .addFields(
                { name: 'üöâ Trasa', value: `${aktivni.startStanice} ‚Üí ${aktivni.cilStanice}`, inline: false },
                { name: 'üë§ Strojv≈Ødce', value: message.author.toString(), inline: true },
                { name: '‚è∞ Doba j√≠zdy', value: `${dobaTrvani} minut`, inline: true },
                { name: 'üí∞ Z√≠skan√© body', value: `${ziskaneBody} bod≈Ø`, inline: true },
                { name: 'üèÜ Celkov√© body', value: `${stats.celkoveBody} bod≈Ø`, inline: true },
                { name: 'üî• Streak', value: `${stats.streak} j√≠zd`, inline: true },
                { name: 'üéñÔ∏è √örove≈à', value: novaUroven, inline: true }
            )
            .setThumbnail(message.author.displayAvatarURL())
            .setFooter({ text: `Vlak ƒç. ${aktivni.vlakCislo} ‚Ä¢ ${aktivni.trainName}` })
            .setTimestamp();

        // Po≈°li embed do centr√°ln√≠ho kan√°lu
        try {
            const centralChannel = await client.channels.fetch(CONFIG.DISPATCHER_CHANNEL_ID);
            await centralChannel.send({ embeds: [endEmbed] });
        } catch (error) {
            console.error('Chyba p≈ôi odes√≠l√°n√≠ do centr√°ln√≠ho kan√°lu:', error);
            // Fallback do p≈Øvodn√≠ho kan√°lu
            message.reply({ embeds: [endEmbed] });
        }
    }

    // ===== P≈ò√çKAZ !MOJEJIZDY =====
    if (message.content.startsWith('!mojejizdy') || message.content.startsWith('!moje')) {
        const stats = getUserStats(message.author.id);
        const jizdy = dokonceneJizdy.get(message.author.id) || [];
        
        // Hlavn√≠ stats embed
        const mainEmbed = new EmbedBuilder()
            .setColor('#3498db')
            .setTitle(`üìä Statistiky pro ${message.author.username}`)
            .addFields(
                { name: 'üèÜ √örove≈à', value: aktualizujUroven(message.author.id, stats.celkoveBody), inline: true },
                { name: 'üí∞ Celkov√© body', value: `${stats.celkoveBody}`, inline: true },
                { name: 'üî• Aktu√°ln√≠ streak', value: `${stats.streak} j√≠zd`, inline: true },
                { name: 'üöÇ Celkem j√≠zd', value: `${stats.celkoveJizdy}`, inline: true },
                { name: '‚è±Ô∏è Celkov√Ω ƒças', value: `${Math.round(stats.celkovyCas / 60)} hodin`, inline: true },
                { name: 'üìÖ Posledn√≠ j√≠zda', value: stats.posledniJizda ? new Date(stats.posledniJizda).toLocaleDateString('cs-CZ') : 'Nikdy', inline: true }
            )
            .setThumbnail(message.author.displayAvatarURL())
            .setTimestamp();

        if (stats.celkoveJizdy === 0) {
            mainEmbed.setDescription('Zat√≠m jste nedokonƒçili ≈æ√°dnou j√≠zdu. Zaƒçnƒõte p≈ô√≠kazem `!jizda [ƒç√≠slo]`!');
            message.channel.send({ embeds: [mainEmbed] });
            return;
        }

        // Pr≈Ømƒõrn√© hodnoty
        const prumernyBody = Math.round(stats.celkoveBody / stats.celkoveJizdy);
        const prumernyCas = Math.round(stats.celkovyCas / stats.celkoveJizdy);
        
        mainEmbed.addFields(
            { name: 'üìà Pr≈Ømƒõrnƒõ za j√≠zdu', value: `${prumernyBody} bod≈Ø | ${prumernyCas} minut`, inline: false }
        );

        // Posledn√≠ch 5 j√≠zd
        if (jizdy.length > 0) {
            const poslednich5 = jizdy.slice(-5).reverse();
            let jizdiText = '';
            
            poslednich5.forEach((jizda, index) => {
                jizdiText += `**${jizda.vlakCislo}** ‚Ä¢ ${jizda.trasa} ‚Ä¢ ${jizda.doba}min ‚Ä¢ +${jizda.body} bod≈Ø\n`;
            });
            
            const jizdyEmbed = new EmbedBuilder()
                .setColor('#2ecc71')
                .setTitle('üöÇ Posledn√≠ch 5 j√≠zd')
                .setDescription(jizdiText || '≈Ω√°dn√© j√≠zdy')
                .setFooter({ text: `Zobrazeno ${Math.min(5, jizdy.length)} z ${jizdy.length} j√≠zd` });
            
            message.channel.send({ embeds: [mainEmbed, jizdyEmbed] });
        } else {
            message.channel.send({ embeds: [mainEmbed] });
        }

        // Pokud m√° aktivn√≠ j√≠zdu, ukaz ji
        if (aktivniJizdy.has(message.author.id)) {
            const aktivni = aktivniJizdy.get(message.author.id);
            const dobaTrvani = Math.round((Date.now() - aktivni.startCas) / (1000 * 60));
            
            const aktivniEmbed = new EmbedBuilder()
                .setColor('#f39c12')
                .setTitle('üîÑ Aktivn√≠ j√≠zda')
                .setDescription(`Vlak **${aktivni.vlakCislo}** ‚Ä¢ ${aktivni.startStanice} ‚Üí ${aktivni.cilStanice}`)
                .addFields(
                    { name: '‚è∞ Doba j√≠zdy', value: `${dobaTrvani} minut`, inline: true },
                    { name: 'üí° Tip', value: `Ukonƒçete p≈ô√≠kazem \`!konecjizdy ${aktivni.vlakCislo}\``, inline: false }
                );
            
            message.channel.send({ embeds: [aktivniEmbed] });
        }
    }

    // ===== P≈ò√çKAZ !≈ΩEB≈ò√çƒåEK =====
    if (message.content.startsWith('!≈æeb≈ô√≠ƒçek') || message.content.startsWith('!zebricek') || message.content.startsWith('!leaderboard')) {
        // Se≈ôaƒè u≈æivatele podle bod≈Ø
        const sortedUsers = Array.from(userStats.entries())
            .filter(([userId, stats]) => stats.celkoveBody > 0)
            .sort((a, b) => b[1].celkoveBody - a[1].celkoveBody)
            .slice(0, 10); // Top 10

        if (sortedUsers.length === 0) {
            message.reply('üèÜ ≈Ωeb≈ô√≠ƒçek je prozat√≠m pr√°zdn√Ω! Zaƒçnƒõte jezdit a z√≠sk√°vejte body pomoc√≠ `!jizda [ƒç√≠slo]`');
            return;
        }

        let leaderboardText = '';
        const medals = ['ü•á', 'ü•à', 'ü•â'];
        
        for (let i = 0; i < sortedUsers.length; i++) {
            const [userId, stats] = sortedUsers[i];
            const user = await client.users.fetch(userId).catch(() => null);
            const userName = user ? user.username : 'Nezn√°m√Ω u≈æivatel';
            const medal = i < 3 ? medals[i] : `${i + 1}.`;
            const uroven = aktualizujUroven(userId, stats.celkoveBody);
            
            leaderboardText += `${medal} **${userName}** ‚Ä¢ ${stats.celkoveBody} bod≈Ø ‚Ä¢ ${uroven} ‚Ä¢ ${stats.celkoveJizdy} j√≠zd\n`;
        }

        const embed = new EmbedBuilder()
            .setColor('#ffd700')
            .setTitle('üèÜ ≈Ωeb≈ô√≠ƒçek strojv≈Ødc≈Ø')
            .setDescription(leaderboardText)
            .addFields(
                { 
                    name: 'üìä Celkov√© statistiky', 
                    value: `**${sortedUsers.length}** aktivn√≠ch strojv≈Ødc≈Ø\n**${sortedUsers.reduce((sum, [_, stats]) => sum + stats.celkoveJizdy, 0)}** dokonƒçen√Ωch j√≠zd\n**${Math.round(sortedUsers.reduce((sum, [_, stats]) => sum + stats.celkovyCas, 0) / 60)}** hodin celkovƒõ`, 
                    inline: false 
                },
                {
                    name: 'üìã Kompletn√≠ historie j√≠zd',
                    value: `[üìä Zobrazit v≈°echny j√≠zdy v Google Sheets](https://docs.google.com/spreadsheets/d/${process.env.GOOGLE_SHEETS_ID}/edit)`,
                    inline: false
                }
            )
            .setFooter({ text: '≈Ωeb≈ô√≠ƒçek se aktualizuje v re√°ln√©m ƒçase' })
            .setTimestamp();

        message.channel.send({ embeds: [embed] });
    }

    // ===== P≈ò√çKAZ !HISTORY =====
    if (message.content.startsWith('!history') || message.content.startsWith('!historie')) {
        const historyEmbed = new EmbedBuilder()
            .setColor('#4285f4')
            .setTitle('üìã Historie v≈°ech j√≠zd')
            .setDescription('Historie v≈°ech j√≠zd ve firmƒõ je zde:\nhttps://docs.google.com/spreadsheets/d/1aBf1rn1OeQrwLhw8NJgkfrE_xViTLqp6AYw2-HyPIRA/edit?usp=sharing')
            .addFields(
                {
                    name: 'üìä Co najdete v tabulce:',
                    value: '‚Ä¢ Datum a ƒças ka≈æd√© j√≠zdy\n‚Ä¢ Jm√©no strojv≈Ødce\n‚Ä¢ ƒå√≠slo vlaku a trasu\n‚Ä¢ Dobu trv√°n√≠ j√≠zdy\n‚Ä¢ Z√≠skan√© body',
                    inline: false
                },
                {
                    name: 'üí° Tip:',
                    value: 'Tabulka se automaticky aktualizuje p≈ôi ka≈æd√© dokonƒçen√© j√≠zdƒõ!',
                    inline: false
                }
            )
            .setFooter({ text: 'MultiCargo Doprava ‚Ä¢ Tracking System' })
            .setTimestamp();

        message.channel.send({ embeds: [historyEmbed] });
    }

    // ===== VELMI JEDNODUCH√ù TEST !test123 =====
    if (message.content === '!test123') {
        const embed = new EmbedBuilder()
            .setColor('#ff0000')
            .setTitle('üî¥ TEST - Bot je aktualizov√°n!')
            .setDescription('Tento p≈ô√≠kaz potvrzuje, ≈æe nov√Ω k√≥d funguje')
            .addFields({
                name: '‚úÖ Status',
                value: 'Bot m√° nejnovƒõj≈°√≠ verzi k√≥du',
                inline: false
            })
            .setFooter({ text: 'Test deployment ‚Ä¢ ' + new Date().toISOString() })
            .setTimestamp();
            
        message.channel.send({ embeds: [embed] });
        return;
    }

    // ===== JEDNODUCH√ù API TEST !apitest =====
    if (message.content === '!apitest') {
        try {
            const response = await axios.get(`https://api1.aws.simrail.eu:8082/api/getEDRTimetables?serverCode=cz1`);
            const trains = response.data;
            
            const embed = new EmbedBuilder()
                .setColor('#00ff00')
                .setTitle('üü¢ API TEST - JSON EDR funguje!')
                .setDescription('Test p≈ô√≠m√©ho vol√°n√≠ JSON API')
                .addFields({
                    name: 'üìä V√Ωsledek',
                    value: `Z√≠sk√°no ${trains.length} vlak≈Ø z JSON API`,
                    inline: false
                })
                .setFooter({ text: 'API Test ‚Ä¢ ' + new Date().toISOString() })
                .setTimestamp();
                
            message.channel.send({ embeds: [embed] });
        } catch (error) {
            message.reply(`‚ùå API Test selhal: ${error.message}`);
        }
        return;
    }

    // ===== P≈ò√çKAZ !ID =====
    if (message.content.startsWith('!id')) {
        // Kontrola opr√°vnƒõn√≠ - pouze v√Ωpravƒç√≠
        if (!message.member.roles.cache.has(CONFIG.VYPRAVCI_ROLE_ID) && !message.member.roles.cache.has(CONFIG.ADMIN_ROLE_ID) && !message.member.permissions.has(PermissionFlagsBits.Administrator)) {
            message.reply('‚ùå Tento p≈ô√≠kaz m≈Ø≈æe pou≈æ√≠vat pouze role üöâ **V√Ωpravƒç√≠**!');
            return;
        }

        const quickEmbed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üöâ Nejpou≈æ√≠vanƒõj≈°√≠ ID stanic')
            .setDescription('‚ö° Rychl√Ω p≈ôehled nejd≈Øle≈æitƒõj≈°√≠ch stanic pro v√Ωpravƒç√≠')
            .addFields(
                {
                    name: 'üèÜ **TOP stanice**',
                    value: '‚Ä¢ `422` - **Warszawa Wschodnia**\n‚Ä¢ `4288` - **Krak√≥w G≈Ç√≥wny**\n‚Ä¢ `4250` - **Krak√≥w P≈Çasz√≥w**\n‚Ä¢ `3991` - **Katowice Zawodzie**\n‚Ä¢ `3993` - **Sosnowiec G≈Ç√≥wny**',
                    inline: true
                },
                {
                    name: 'üöÇ **Hlavn√≠ uzly**',
                    value: '‚Ä¢ `4500` - **Warszawa Zachodnia**\n‚Ä¢ `5100` - **Radom**\n‚Ä¢ `5155` - **Kielce**\n‚Ä¢ `4040` - **Katowice**\n‚Ä¢ `5300` - **Skierniewice**',
                    inline: true
                },
                {
                    name: '‚ö° **Informace pro v√Ωpravƒç√≠**',
                    value: 'EDR p≈ô√≠kazy byly odstranƒõny.\nPro monitorov√°n√≠ vlak≈Ø pou≈æijte `!jizda [ƒç√≠slo]`',
                    inline: false
                }
            )
            .setFooter({ text: 'MultiCargo Doprava ‚Ä¢ Rychl√Ω p≈ôehled' })
            .setTimestamp();

        message.channel.send({ embeds: [quickEmbed] });
    }

    // ===== P≈ò√çKAZ !BODY =====
    if (message.content.startsWith('!body') || message.content.startsWith('!skore')) {
        const stats = getUserStats(message.author.id);
        const uroven = aktualizujUroven(message.author.id, stats.celkoveBody);
        
        // Vypoƒç√≠tej pokrok k dal≈°√≠ √∫rovni
        const nextLevelThreshold = UROVNE.find(level => level.min > stats.celkoveBody);
        
        let pokrokText = '';
        if (nextLevelThreshold) {
            const potrebne = nextLevelThreshold.min - stats.celkoveBody;
            pokrokText = `\nüéØ Do dal≈°√≠ √∫rovnƒõ (${nextLevelThreshold.nazev}): **${potrebne}** bod≈Ø`;
        } else {
            pokrokText = '\nüëë M√°te nejvy≈°≈°√≠ √∫rove≈à!';
        }

        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle(`üí∞ Body pro ${message.author.username}`)
            .setDescription(`**${stats.celkoveBody}** bod≈Ø ‚Ä¢ ${uroven}${pokrokText}`)
            .addFields(
                { name: 'üî• Streak', value: `${stats.streak} j√≠zd`, inline: true },
                { name: 'üöÇ Celkem j√≠zd', value: `${stats.celkoveJizdy}`, inline: true },
                { name: '‚è±Ô∏è Celkov√Ω ƒças', value: `${Math.round(stats.celkovyCas / 60)}h`, inline: true }
            )
            .setThumbnail(message.author.displayAvatarURL())
            .setFooter({ text: 'Zaƒçnƒõte j√≠zdu p≈ô√≠kazem !jizda [ƒç√≠slo]' });

        // Pokud m√° aktivn√≠ j√≠zdu, p≈ôidej info
        if (aktivniJizdy.has(message.author.id)) {
            const aktivni = aktivniJizdy.get(message.author.id);
            const dobaTrvani = Math.round((Date.now() - aktivni.startCas) / (1000 * 60));
            embed.addFields({ 
                name: 'üîÑ Aktivn√≠ j√≠zda', 
                value: `Vlak **${aktivni.vlakCislo}** (${dobaTrvani} min)`, 
                inline: false 
            });
        }

        message.channel.send({ embeds: [embed] });
    }

    // ===== P≈ò√çKAZ !VLAK [ƒå√çSLO] =====
    if (message.content.startsWith('!vlak')) {
        const args = message.content.slice('!vlak'.length).trim().split(' ');
        const vlakoveCislo = args[0];

        if (!vlakoveCislo || isNaN(vlakoveCislo)) {
            message.reply('‚ùå Pros√≠m, zadejte platn√© ƒç√≠slo vlaku. P≈ô√≠klad: `!vlak 32922`');
            return;
        }

        try {
            const response = await axios.get('https://api1.aws.simrail.eu:8082/api/getAllTimetables?serverCode=cz1');
            const vlaky = response.data;

            if (!Array.isArray(vlaky) || vlaky.length === 0) {
                message.reply('‚ùå Moment√°lnƒõ nejsou dostupn√° data o vlac√≠ch. Zkuste to pozdƒõji.');
                return;
            }

            // Najdi vlak podle ƒç√≠sla
            const hledanyVlak = vlaky.find(vlak => 
                vlak.trainNoLocal === vlakoveCislo || 
                vlak.trainNoLocal === parseInt(vlakoveCislo)
            );

            if (!hledanyVlak) {
                message.reply(`‚ùå Vlak s ƒç√≠slem **${vlakoveCislo}** nebyl nalezen.\nüí° Tip: Pou≈æijte \`!jizda\` pro zobrazen√≠ dostupn√Ωch vlak≈Ø.`);
                return;
            }

            // Informace o vlaku
            const embed = new EmbedBuilder()
                .setColor('#3498db')
                .setTitle(`üöÇ Vlak ${hledanyVlak.trainNoLocal}`)
                .setDescription(`**${hledanyVlak.trainName || 'Bez n√°zvu'}**`)
                .addFields(
                    { name: 'üöâ V√Ωchoz√≠ stanice', value: hledanyVlak.startStation || 'Nezn√°m√°', inline: true },
                    { name: 'üèÅ C√≠lov√° stanice', value: hledanyVlak.endStation || 'Nezn√°m√°', inline: true },
                    { name: 'üöÇ Lokomotiva', value: hledanyVlak.locoType || 'Nezn√°m√°', inline: true },
                    { name: '‚öñÔ∏è V√°ha', value: hledanyVlak.weight ? `${hledanyVlak.weight} t` : 'Nezn√°m√°', inline: true },
                    { name: 'üìè D√©lka', value: hledanyVlak.length ? `${hledanyVlak.length} m` : 'Nezn√°m√°', inline: true },
                    { name: 'üéØ Run ID', value: hledanyVlak.runId || 'Nezn√°m√©', inline: true }
                )
                .setFooter({ text: `Celkem zast√°vek: ${hledanyVlak.timetable ? hledanyVlak.timetable.length : 'Nezn√°mo'} ‚Ä¢ Pou≈æijte !trasa ${vlakoveCislo} pro kompletn√≠ trasu` })
                .setTimestamp();

            // P≈ôidej ƒçasy z prvn√≠ a posledn√≠ zast√°vky
            if (hledanyVlak.timetable && hledanyVlak.timetable.length > 0) {
                const prvniZastavka = hledanyVlak.timetable[0];
                const posledniZastavka = hledanyVlak.timetable[hledanyVlak.timetable.length - 1];
                
                embed.addFields(
                    { 
                        name: '‚è∞ ƒåasov√Ω rozpis', 
                        value: `**Odjezd:** ${prvniZastavka.departureTime || 'N/A'}\n**P≈ô√≠jezd:** ${posledniZastavka.arrivalTime || 'N/A'}`, 
                        inline: false 
                    }
                );
            }

            message.channel.send({ embeds: [embed] });

        } catch (error) {
            console.error('Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o vlaku:', error);
            message.reply('‚ùå Do≈°lo k chybƒõ p≈ôi z√≠sk√°v√°n√≠ informac√≠ o vlaku. Zkuste to pozdƒõji.');
        }
    }

    // ===== P≈ò√çKAZ !TRASA [ƒå√çSLO] =====
    if (message.content.startsWith('!trasa')) {
        const args = message.content.slice('!trasa'.length).trim().split(' ');
        const vlakoveCislo = args[0];

        if (!vlakoveCislo || isNaN(vlakoveCislo)) {
            message.reply('‚ùå Pros√≠m, zadejte platn√© ƒç√≠slo vlaku. P≈ô√≠klad: `!trasa 32922`');
            return;
        }

        try {
            const response = await axios.get('https://api1.aws.simrail.eu:8082/api/getAllTimetables?serverCode=cz1');
            const vlaky = response.data;

            if (!Array.isArray(vlaky) || vlaky.length === 0) {
                message.reply('‚ùå Moment√°lnƒõ nejsou dostupn√° data o vlac√≠ch. Zkuste to pozdƒõji.');
                return;
            }

            // Najdi vlak podle ƒç√≠sla
            const hledanyVlak = vlaky.find(vlak => 
                vlak.trainNoLocal === vlakoveCislo || 
                vlak.trainNoLocal === parseInt(vlakoveCislo)
            );

            if (!hledanyVlak) {
                message.reply(`‚ùå Vlak s ƒç√≠slem **${vlakoveCislo}** nebyl nalezen.\nüí° Tip: Pou≈æijte \`!vlak ${vlakoveCislo}\` pro z√°kladn√≠ info.`);
                return;
            }

            if (!hledanyVlak.timetable || hledanyVlak.timetable.length === 0) {
                message.reply(`‚ùå Pro vlak **${vlakoveCislo}** nen√≠ dostupn√Ω ƒçasov√Ω rozpis.`);
                return;
            }

            // Hlavn√≠ embed s informacemi o vlaku
            const mainEmbed = new EmbedBuilder()
                .setColor('#9b59b6')
                .setTitle(`üó∫Ô∏è Trasa vlaku ${hledanyVlak.trainNoLocal}`)
                .setDescription(`**${hledanyVlak.trainName || 'Bez n√°zvu'}**\n${hledanyVlak.startStation} ‚Üí ${hledanyVlak.endStation}`)
                .addFields(
                    { name: 'üöÇ Lokomotiva', value: hledanyVlak.locoType || 'Nezn√°m√°', inline: true },
                    { name: 'üìä Zast√°vek celkem', value: `${hledanyVlak.timetable.length}`, inline: true },
                    { name: 'üéØ Run ID', value: hledanyVlak.runId || 'Nezn√°m√©', inline: true }
                );

            // Filtruj jen stanice dostupn√© v SimRail (kde vlak skuteƒçnƒõ zastavuje)
            // Stanice s ƒçasem odjezdu nebo p≈ô√≠jezdu jsou dostupn√© pro hr√°ƒçe
            const playableStops = hledanyVlak.timetable.filter(stop => {
                // Prvn√≠ stanice - mus√≠ m√≠t odjezd
                if (stop === hledanyVlak.timetable[0]) {
                    return stop.departureTime && stop.departureTime !== '--:--';
                }
                // Posledn√≠ stanice - mus√≠ m√≠t p≈ô√≠jezd  
                if (stop === hledanyVlak.timetable[hledanyVlak.timetable.length - 1]) {
                    return stop.arrivalTime && stop.arrivalTime !== '--:--';
                }
                // Mezilehl√© stanice - mus√≠ m√≠t p≈ô√≠jezd NEBO odjezd (ne jen proj√≠≈ædƒõn√≠)
                return (stop.arrivalTime && stop.arrivalTime !== '--:--') || 
                       (stop.departureTime && stop.departureTime !== '--:--');
            });

            // Aktualizuj hlavn√≠ embed s informacemi
            mainEmbed.spliceFields(1, 1, { name: 'üöâ Stanice v SimRail', value: `${playableStops.length}`, inline: true });

            // Vytvo≈ô embedy pro v≈°echny stanice (rozdƒõlen√© kv≈Øli Discord limitu)
            const embeds = [mainEmbed];
            const stopsPerEmbed = 15; // Discord limit cca 4000 znak≈Ø na embed
            const totalEmbeds = Math.ceil(playableStops.length / stopsPerEmbed);

            for (let embedIndex = 0; embedIndex < totalEmbeds; embedIndex++) {
                const startIndex = embedIndex * stopsPerEmbed;
                const endIndex = Math.min(startIndex + stopsPerEmbed, playableStops.length);
                const stopsInThisEmbed = playableStops.slice(startIndex, endIndex);
                
                let trasaText = '';

                stopsInThisEmbed.forEach((stop, localIndex) => {
                    const globalIndex = startIndex + localIndex;
                    let emoji;
                    
                    if (globalIndex === 0) {
                        emoji = 'üöâ'; // Start
                    } else if (globalIndex === playableStops.length - 1) {
                        emoji = 'üèÅ'; // C√≠l
                    } else {
                        emoji = '‚ñ´Ô∏è'; // Mezilehl√° stanice
                    }

                    const arrTime = stop.arrivalTime || '--:--';
                    const depTime = stop.departureTime || '--:--';
                    const platform = stop.platform ? ` | ${stop.platform}` : '';
                    const track = stop.track ? ` | ${stop.track}` : '';
                    
                    if (globalIndex === 0) {
                        // Prvn√≠ stanice - jen odjezd
                        trasaText += `${emoji} **${stop.nameOfPoint}** | Odjezd: **${depTime}**${platform}${track}\n`;
                    } else if (globalIndex === playableStops.length - 1) {
                        // Posledn√≠ stanice - jen p≈ô√≠jezd
                        trasaText += `${emoji} **${stop.nameOfPoint}** | P≈ô√≠jezd: **${arrTime}**${platform}${track}\n`;
                    } else {
                        // Mezilehl√© stanice
                        if (arrTime === depTime || depTime === '--:--') {
                            trasaText += `${emoji} ${stop.nameOfPoint} | **${arrTime}**${platform}${track}\n`;
                        } else if (arrTime === '--:--') {
                            trasaText += `${emoji} ${stop.nameOfPoint} | Odjezd: **${depTime}**${platform}${track}\n`;
                        } else {
                            trasaText += `${emoji} ${stop.nameOfPoint} | ${arrTime} - ${depTime}${platform}${track}\n`;
                        }
                    }
                });

                const routeEmbed = new EmbedBuilder()
                    .setColor('#3498db')
                    .setTitle(totalEmbeds === 1 ? 'üöâ Kompletn√≠ j√≠zdn√≠ ≈ô√°d' : `üöâ J√≠zdn√≠ ≈ô√°d (${embedIndex + 1}/${totalEmbeds})`)
                    .setDescription(trasaText)
                    .setFooter({ 
                        text: totalEmbeds === 1 
                            ? `${playableStops.length} stanic dostupn√Ωch v SimRail ‚Ä¢ Pou≈æijte !pozice ${vlakoveCislo} pro aktu√°ln√≠ pozici`
                            : `Stanice ${startIndex + 1}-${endIndex} z ${playableStops.length} ‚Ä¢ Pou≈æijte !pozice ${vlakoveCislo} pro pozici`
                    });

                embeds.push(routeEmbed);
            }

            message.channel.send({ embeds: embeds });

        } catch (error) {
            console.error('Chyba p≈ôi z√≠sk√°v√°n√≠ trasy vlaku:', error);
            message.reply('‚ùå Do≈°lo k chybƒõ p≈ôi z√≠sk√°v√°n√≠ trasy vlaku. Zkuste to pozdƒõji.');
        }
    }

    // ===== P≈ò√çKAZ !POZICE [ƒå√çSLO] =====
    if (message.content.startsWith('!pozice')) {
        const args = message.content.slice('!pozice'.length).trim().split(' ');
        const vlakoveCislo = args[0];

        if (!vlakoveCislo || isNaN(vlakoveCislo)) {
            message.reply('‚ùå Pros√≠m, zadejte platn√© ƒç√≠slo vlaku. P≈ô√≠klad: `!pozice 32922`');
            return;
        }

        try {
            const response = await axios.get('https://api1.aws.simrail.eu:8082/api/getAllTimetables?serverCode=cz1');
            const vlaky = response.data;

            if (!Array.isArray(vlaky) || vlaky.length === 0) {
                message.reply('‚ùå Moment√°lnƒõ nejsou dostupn√° data o vlac√≠ch. Zkuste to pozdƒõji.');
                return;
            }

            // Najdi vlak podle ƒç√≠sla
            const hledanyVlak = vlaky.find(vlak => 
                vlak.trainNoLocal === vlakoveCislo || 
                vlak.trainNoLocal === parseInt(vlakoveCislo)
            );

            if (!hledanyVlak) {
                message.reply(`‚ùå Vlak s ƒç√≠slem **${vlakoveCislo}** nebyl nalezen.`);
                return;
            }

            if (!hledanyVlak.timetable || hledanyVlak.timetable.length === 0) {
                message.reply(`‚ùå Pro vlak **${vlakoveCislo}** nen√≠ dostupn√Ω ƒçasov√Ω rozpis.`);
                return;
            }

            // Z√≠skej aktu√°ln√≠ ƒças v UTC (SimRail pou≈æ√≠v√° UTC ƒçasy)
            const now = new Date();
            const currentTime = now.toISOString().substring(11, 16); // HH:MM format

            // Funkce pro p≈ôevod ƒçasu na minuty
            function timeToMinutes(timeStr) {
                if (!timeStr || timeStr === '--:--') return -1;
                const [hours, minutes] = timeStr.split(':').map(Number);
                return hours * 60 + minutes;
            }

            const currentMinutes = timeToMinutes(currentTime);
            let currentPosition = null;
            let nextStation = null;
            let previousStation = null;

            // Najdi aktu√°ln√≠ pozici na trase
            for (let i = 0; i < hledanyVlak.timetable.length; i++) {
                const stop = hledanyVlak.timetable[i];
                const arrTime = timeToMinutes(stop.arrivalTime);
                const depTime = timeToMinutes(stop.departureTime);

                if (i === 0) {
                    // Prvn√≠ zast√°vka - pouze odjezd
                    if (currentMinutes < timeToMinutes(stop.departureTime)) {
                        currentPosition = { type: 'waiting', station: stop, index: i };
                        break;
                    }
                } else if (i === hledanyVlak.timetable.length - 1) {
                    // Posledn√≠ zast√°vka - pouze p≈ô√≠jezd
                    if (currentMinutes >= arrTime) {
                        currentPosition = { type: 'arrived', station: stop, index: i };
                        break;
                    }
                } else {
                    // Mezilehl√© zast√°vky
                    if (currentMinutes >= arrTime && currentMinutes <= depTime) {
                        currentPosition = { type: 'at_station', station: stop, index: i };
                        break;
                    }
                }

                // Vlak mezi zast√°vkami
                if (i < hledanyVlak.timetable.length - 1) {
                    const nextStop = hledanyVlak.timetable[i + 1];
                    const currentDepTime = depTime !== -1 ? depTime : arrTime;
                    const nextArrTime = timeToMinutes(nextStop.arrivalTime);

                    if (currentMinutes > currentDepTime && currentMinutes < nextArrTime) {
                        currentPosition = { 
                            type: 'between', 
                            from: stop, 
                            to: nextStop, 
                            index: i 
                        };
                        break;
                    }
                }
            }

            if (!currentPosition) {
                // Vlak je≈°tƒõ nezaƒçal nebo u≈æ skonƒçil
                const firstDep = timeToMinutes(hledanyVlak.timetable[0].departureTime);
                const lastArr = timeToMinutes(hledanyVlak.timetable[hledanyVlak.timetable.length - 1].arrivalTime);
                
                if (currentMinutes < firstDep) {
                    currentPosition = { type: 'not_started', station: hledanyVlak.timetable[0] };
                } else if (currentMinutes > lastArr) {
                    currentPosition = { type: 'finished', station: hledanyVlak.timetable[hledanyVlak.timetable.length - 1] };
                }
            }

            // Vytvo≈ô embed s pozic√≠
            const embed = new EmbedBuilder()
                .setColor('#f39c12')
                .setTitle(`üìç Pozice vlaku ${hledanyVlak.trainNoLocal}`)
                .setDescription(`**${hledanyVlak.trainName || 'Bez n√°zvu'}**`)
                .addFields({ name: 'üïê Aktu√°ln√≠ ƒças', value: currentTime, inline: true });

            let statusText = '';
            let statusColor = '#f39c12';

            switch (currentPosition?.type) {
                case 'not_started':
                    statusText = `üî¥ **Vlak je≈°tƒõ nevyjel**\nOdjezd z **${currentPosition.station.nameOfPoint}** v **${currentPosition.station.departureTime}**`;
                    statusColor = '#e74c3c';
                    break;
                case 'waiting':
                    statusText = `üü° **P≈ôipraven k odjezdu**\nStanice: **${currentPosition.station.nameOfPoint}**\nOdjezd: **${currentPosition.station.departureTime}**`;
                    statusColor = '#f1c40f';
                    break;
                case 'at_station':
                    statusText = `üü¢ **Stoj√≠ ve stanici**\n**${currentPosition.station.nameOfPoint}**\nOdjezd: **${currentPosition.station.departureTime}**`;
                    if (currentPosition.station.platform) statusText += `\nN√°stup.: **${currentPosition.station.platform}**`;
                    statusColor = '#27ae60';
                    break;
                case 'between':
                    statusText = `üöÇ **Jede mezi stanicemi**\n**${currentPosition.from.nameOfPoint}** ‚Üí **${currentPosition.to.nameOfPoint}**\nP≈ô√≠jezd: **${currentPosition.to.arrivalTime}**`;
                    statusColor = '#3498db';
                    break;
                case 'arrived':
                    statusText = `üèÅ **Vlak dorazil do c√≠le**\n**${currentPosition.station.nameOfPoint}**\nP≈ô√≠jezd: **${currentPosition.station.arrivalTime}**`;
                    statusColor = '#9b59b6';
                    break;
                case 'finished':
                    statusText = `‚ö´ **Vlak ukonƒçil j√≠zdu**\nC√≠lov√° stanice: **${currentPosition.station.nameOfPoint}**`;
                    statusColor = '#95a5a6';
                    break;
                default:
                    statusText = '‚ùì **Nelze urƒçit pozici**\nData o pozici nejsou k dispozici';
                    statusColor = '#e74c3c';
            }

            embed.setColor(statusColor);
            embed.addFields({ name: 'üìç Aktu√°ln√≠ stav', value: statusText, inline: false });

            // P≈ôidej dal≈°√≠/p≈ôedchoz√≠ zast√°vky pokud jsou relevantn√≠
            if (currentPosition && currentPosition.index !== undefined) {
                const nextStops = hledanyVlak.timetable.slice(currentPosition.index + 1, currentPosition.index + 4);
                if (nextStops.length > 0) {
                    let nextText = nextStops.map(stop => 
                        `‚Ä¢ **${stop.nameOfPoint}** - ${stop.arrivalTime || stop.departureTime}`
                    ).join('\n');
                    embed.addFields({ name: '‚è≠Ô∏è N√°sleduj√≠c√≠ zast√°vky', value: nextText, inline: false });
                }
            }

            embed.setFooter({ text: `Pou≈æijte !trasa ${vlakoveCislo} pro kompletn√≠ trasu` });
            embed.setTimestamp();

            message.channel.send({ embeds: [embed] });

        } catch (error) {
            console.error('Chyba p≈ôi z√≠sk√°v√°n√≠ pozice vlaku:', error);
            message.reply('‚ùå Do≈°lo k chybƒõ p≈ôi z√≠sk√°v√°n√≠ pozice vlaku. Zkuste to pozdƒõji.');
        }
    }

    // ===== P≈ò√çKAZ !STANICE-INFO [ID] =====
    if (message.content.startsWith('!stanice-info') || message.content.startsWith('!stanice')) {
        const args = message.content.split(' ')[1];
        const stationId = args;

        if (!stationId) {
            message.reply('‚ùå Pros√≠m, zadejte ID stanice. P≈ô√≠klad: `!stanice-info 422`\nüí° Pro seznam v≈°ech stanic pou≈æijte `!stanice-seznam`');
            return;
        }

        try {
            const response = await axios.get('https://api1.aws.simrail.eu:8082/api/getAllTimetables?serverCode=cz1');
            const vlaky = response.data;

            if (!Array.isArray(vlaky) || vlaky.length === 0) {
                message.reply('‚ùå Moment√°lnƒõ nejsou dostupn√° data o vlac√≠ch. Zkuste to pozdƒõji.');
                return;
            }

            // Najdi v≈°echny vlaky, kter√© proj√≠≈ædƒõj√≠ touto stanic√≠
            const vlakyVeStanici = [];
            let stationName = null;

            vlaky.forEach(vlak => {
                if (vlak.timetable && Array.isArray(vlak.timetable)) {
                    vlak.timetable.forEach(stop => {
                        if (stop.pointId === stationId || stop.pointId === parseInt(stationId)) {
                            if (!stationName) stationName = stop.nameOfPoint;
                            vlakyVeStanici.push({
                                trainNo: vlak.trainNoLocal,
                                trainName: vlak.trainName,
                                arrivalTime: stop.arrivalTime,
                                departureTime: stop.departureTime,
                                platform: stop.platform,
                                track: stop.track,
                                stopType: stop.stopType,
                                startStation: vlak.startStation,
                                endStation: vlak.endStation,
                                locoType: vlak.locoType
                            });
                        }
                    });
                }
            });

            if (vlakyVeStanici.length === 0) {
                message.reply(`‚ùå Stanice s ID **${stationId}** nebyla nalezena nebo j√≠ neproj√≠≈æd√≠ ≈æ√°dn√© vlaky.\nüí° Pou≈æijte \`!stanice-seznam\` pro kompletn√≠ seznam stanic.`);
                return;
            }

            // Se≈ôaƒè vlaky podle ƒçasu
            vlakyVeStanici.sort((a, b) => {
                const timeA = a.arrivalTime || a.departureTime || '00:00';
                const timeB = b.arrivalTime || b.departureTime || '00:00';
                return timeA.localeCompare(timeB);
            });

            // Hlavn√≠ embed
            const mainEmbed = new EmbedBuilder()
                .setColor('#e67e22')
                .setTitle(`üöâ ${stationName || 'Nezn√°m√° stanice'}`)
                .setDescription(`**ID stanice:** ${stationId}`)
                .addFields(
                    { name: 'üöÇ Celkem vlak≈Ø', value: `${vlakyVeStanici.length}`, inline: true },
                    { name: 'üìä √ödaje k dispozici', value: 'ƒåasy, n√°stupi≈°tƒõ, koleje', inline: true },
                    { name: 'üîÑ Aktualizace', value: 'V re√°ln√©m ƒçase', inline: true }
                );

            // Seznam vlak≈Ø - omez na prvn√≠ch 15
            const maxTrains = 15;
            const displayTrains = vlakyVeStanici.slice(0, maxTrains);
            let vlakText = '';

            displayTrains.forEach(vlak => {
                const timeInfo = vlak.arrivalTime && vlak.departureTime && vlak.arrivalTime !== vlak.departureTime 
                    ? `${vlak.arrivalTime} - ${vlak.departureTime}`
                    : vlak.arrivalTime || vlak.departureTime || '--:--';
                
                const platformInfo = vlak.platform ? ` | ${vlak.platform}` : '';
                const trackInfo = vlak.track ? ` | ${vlak.track}` : '';
                
                vlakText += `üöÇ **${vlak.trainNo}** (${vlak.trainName || 'bez n√°zvu'})\n`;
                vlakText += `‚è∞ ${timeInfo}${platformInfo}${trackInfo}\n`;
                vlakText += `üìç ${vlak.startStation} ‚Üí ${vlak.endStation}\n\n`;
            });

            if (vlakyVeStanici.length > maxTrains) {
                vlakText += `... a ${vlakyVeStanici.length - maxTrains} dal≈°√≠ch vlak≈Ø`;
            }

            const trainsEmbed = new EmbedBuilder()
                .setColor('#3498db')
                .setTitle('üöÇ Proj√≠≈ædƒõj√≠c√≠ vlaky')
                .setDescription(vlakText || '≈Ω√°dn√© vlaky nenalezeny')
                .setFooter({ text: `${displayTrains.length}/${vlakyVeStanici.length} vlak≈Ø ‚Ä¢ Se≈ôazeno podle ƒçasu` });

            // Statistiky
            const osobniVlaky = vlakyVeStanici.filter(v => !v.locoType || v.locoType.includes('EN') || v.trainName?.includes('IC') || v.trainName?.includes('EC')).length;
            const nakladniVlaky = vlakyVeStanici.filter(v => v.locoType && (v.locoType.includes('ET22') || v.locoType.includes('SM42'))).length;

            const statsEmbed = new EmbedBuilder()
                .setColor('#27ae60')
                .setTitle('üìä Statistiky stanice')
                .addFields(
                    { name: 'üë• Osobn√≠ doprava', value: `${osobniVlaky} vlak≈Ø`, inline: true },
                    { name: 'üì¶ N√°kladn√≠ doprava', value: `${nakladniVlaky} vlak≈Ø`, inline: true },
                    { name: 'üéØ Vyu≈æit√≠', value: vlakyVeStanici.length > 20 ? 'Vysok√©' : vlakyVeStanici.length > 10 ? 'St≈ôedn√≠' : 'N√≠zk√©', inline: true }
                )
                .setFooter({ text: 'Pou≈æijte !vlak [ƒç√≠slo] pro detail konkr√©tn√≠ho vlaku' });

            message.channel.send({ embeds: [mainEmbed, trainsEmbed, statsEmbed] });

        } catch (error) {
            console.error('Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o stanici:', error);
            message.reply('‚ùå Do≈°lo k chybƒõ p≈ôi z√≠sk√°v√°n√≠ informac√≠ o stanici. Zkuste to pozdƒõji.');
        }
    }

    // ===== P≈ò√çKAZ !STANICE-SEZNAM =====
    if (message.content.startsWith('!stanice-seznam') || message.content.startsWith('!stanice-all') || message.content.startsWith('!v≈°echny-stanice')) {
        try {
            const response = await axios.get('https://api1.aws.simrail.eu:8082/api/getAllTimetables?serverCode=cz1');
            const vlaky = response.data;

            if (!Array.isArray(vlaky) || vlaky.length === 0) {
                message.reply('‚ùå Moment√°lnƒõ nejsou dostupn√° data o vlac√≠ch. Zkuste to pozdƒõji.');
                return;
            }

            // Z√≠skej v≈°echny unik√°tn√≠ stanice
            const allStations = new Map(); // pointId -> {name, trainCount}

            vlaky.forEach(vlak => {
                if (vlak.timetable && Array.isArray(vlak.timetable)) {
                    vlak.timetable.forEach(stop => {
                        const stationId = stop.pointId;
                        const stationName = stop.nameOfPoint;
                        
                        if (stationId && stationName) {
                            if (allStations.has(stationId)) {
                                allStations.get(stationId).trainCount++;
                            } else {
                                allStations.set(stationId, {
                                    name: stationName,
                                    trainCount: 1
                                });
                            }
                        }
                    });
                }
            });

            // P≈ôeveƒè na pole a se≈ôaƒè podle poƒçtu vlak≈Ø (nejpou≈æ√≠vanƒõj≈°√≠ prvn√≠)
            const sortedStations = Array.from(allStations.entries())
                .sort((a, b) => b[1].trainCount - a[1].trainCount);

            if (sortedStations.length === 0) {
                message.reply('‚ùå Nepoda≈ôilo se naj√≠t ≈æ√°dn√© stanice.');
                return;
            }

            // Hlavn√≠ embed
            const mainEmbed = new EmbedBuilder()
                .setColor('#2c3e50')
                .setTitle('üöâ Seznam v≈°ech stanic')
                .setDescription(`**Celkem nalezeno:** ${sortedStations.length} stanic\n**Se≈ôazeno podle:** poƒçtu proj√≠≈ædƒõj√≠c√≠ch vlak≈Ø`)
                .addFields(
                    { name: 'üí° Jak pou≈æ√≠t', value: 'Pou≈æijte `!stanice-info [ID]` pro detail stanice', inline: false },
                    { name: 'üîù Nejpou≈æ√≠vanƒõj≈°√≠', value: `**${sortedStations[0][1].name}** (ID: ${sortedStations[0][0]}) - ${sortedStations[0][1].trainCount} vlak≈Ø`, inline: false }
                );

            // Rozdƒõl√≠me stanice do skupin pro lep≈°√≠ ƒçitelnost
            const itemsPerPage = 15;
            const totalPages = Math.ceil(sortedStations.length / itemsPerPage);
            
            // Prvn√≠ str√°nka (nejpou≈æ√≠vanƒõj≈°√≠ stanice)
            const topStations = sortedStations.slice(0, itemsPerPage);
            let topStationsText = '';
            
            topStations.forEach((station, index) => {
                const [stationId, data] = station;
                const emoji = index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : '‚ñ´Ô∏è';
                topStationsText += `${emoji} **${data.name}**\n   ID: \`${stationId}\` | ${data.trainCount} vlak≈Ø\n`;
            });

            const topEmbed = new EmbedBuilder()
                .setColor('#e74c3c')
                .setTitle('üèÜ TOP 15 nejpou≈æ√≠vanƒõj≈°√≠ch stanic')
                .setDescription(topStationsText)
                .setFooter({ text: `Str√°nka 1/${totalPages} ‚Ä¢ Pou≈æijte !stanice-info [ID] pro detail` });

            // Po≈°li embedy
            const embeds = [mainEmbed, topEmbed];

            // Pokud je v√≠ce stanic, p≈ôidej druhou str√°nku
            if (sortedStations.length > itemsPerPage) {
                const remainingStations = sortedStations.slice(itemsPerPage, itemsPerPage * 2);
                let remainingText = '';
                
                remainingStations.forEach(station => {
                    const [stationId, data] = station;
                    remainingText += `‚ñ´Ô∏è **${data.name}** | ID: \`${stationId}\` | ${data.trainCount} vlak≈Ø\n`;
                });

                if (remainingText.length > 0) {
                    const remainingEmbed = new EmbedBuilder()
                        .setColor('#3498db')
                        .setTitle(`üìã Dal≈°√≠ stanice (16-${Math.min(30, sortedStations.length)})`)
                        .setDescription(remainingText)
                        .setFooter({ text: `${sortedStations.length > 30 ? `... a ${sortedStations.length - 30} dal≈°√≠ch stanic` : `Celkem ${sortedStations.length} stanic`}` });
                    
                    embeds.push(remainingEmbed);
                }
            }

            // Statistiky
            const avgTrainsPerStation = Math.round(sortedStations.reduce((sum, [_, data]) => sum + data.trainCount, 0) / sortedStations.length);
            const busyStations = sortedStations.filter(([_, data]) => data.trainCount >= 10).length;
            
            const statsEmbed = new EmbedBuilder()
                .setColor('#27ae60')
                .setTitle('üìä Statistiky stanic')
                .addFields(
                    { name: 'üöâ Celkem stanic', value: `${sortedStations.length}`, inline: true },
                    { name: 'üöÇ Pr≈Ømƒõr vlak≈Ø/stanice', value: `${avgTrainsPerStation}`, inline: true },
                    { name: 'üî• Ru≈°n√© stanice (10+ vlak≈Ø)', value: `${busyStations}`, inline: true }
                )
                .setFooter({ text: 'Data v re√°ln√©m ƒçase ze serveru cz1' });

            embeds.push(statsEmbed);
            message.channel.send({ embeds: embeds });

        } catch (error) {
            console.error('Chyba p≈ôi z√≠sk√°v√°n√≠ seznamu stanic:', error);
            message.reply('‚ùå Do≈°lo k chybƒõ p≈ôi z√≠sk√°v√°n√≠ seznamu stanic. Zkuste to pozdƒõji.');
        }
    }

    // ===== ADMIN P≈ò√çKAZY PRO SCHVALOV√ÅN√ç V TICKET KAN√ÅLECH =====
    if (message.content.startsWith('!schv√°lit') || message.content.startsWith('!schvalit')) {
        // Zkontroluj admin opr√°vnƒõn√≠
        if (!message.member.roles.cache.has(CONFIG.ADMIN_ROLE_ID) && !message.member.permissions.has(PermissionFlagsBits.Administrator)) {
            message.reply('‚ùå Nem√°te opr√°vnƒõn√≠ k schvalov√°n√≠ p≈ôihl√°≈°ek!');
            return;
        }

        // Zkontroluj, jestli je to ticket kan√°l
        if (!message.channel.name.startsWith('p≈ôihl√°≈°ka-')) {
            message.reply('‚ùå Tento p≈ô√≠kaz lze pou≈æ√≠t pouze v kan√°lech s p≈ôihl√°≈°kami!');
            return;
        }

        // Najdi u≈æivatele z aktivn√≠ch p≈ôihl√°≈°ek
        let targetUserId = null;
        let applicationData = null;
        
        for (const [userId, app] of activeApplications) {
            if (app.channelId === message.channel.id) {
                targetUserId = userId;
                applicationData = app;
                break;
            }
        }

        if (!targetUserId) {
            message.reply('‚ùå Nepoda≈ôilo se naj√≠t u≈æivatele pro tuto p≈ôihl√°≈°ku.');
            return;
        }

        try {
            const user = await client.users.fetch(targetUserId);
            const member = await message.guild.members.fetch(targetUserId);
            
            // P≈ôidej roli zamƒõstnance
            await member.roles.add(CONFIG.EMPLOYEE_ROLE_ID);

            // Embed pro schv√°len√≠
            const approvedEmbed = new EmbedBuilder()
                .setColor('#00ff00')
                .setTitle('‚úÖ P≈ôihl√°≈°ka schv√°lena!')
                .setDescription(`**${user.tag}** byl √∫spƒõ≈°nƒõ p≈ôijat do t√Ωmu!`)
                .addFields(
                    { name: 'üë®‚Äçüíº Schv√°lil', value: message.author.tag, inline: true },
                    { name: 'üìÖ Datum', value: new Date().toLocaleString('cs-CZ'), inline: true },
                    { name: 'üé≠ P≈ôidƒõlen√° role', value: `<@&${CONFIG.EMPLOYEE_ROLE_ID}>`, inline: true }
                )
                .setTimestamp();

            await message.channel.send({ embeds: [approvedEmbed] });

            // Po≈°li DM u≈æivateli
            try {
                const dmEmbed = new EmbedBuilder()
                    .setColor('#00ff00')
                    .setTitle('üéâ Gratulujeme!')
                    .setDescription(`Va≈°e p≈ôihl√°≈°ka na serveru **${message.guild.name}** byla schv√°lena!`)
                    .addFields(
                        { name: '‚úÖ Co se stalo?', value: 'Byli jste p≈ôijati do t√Ωmu a z√≠skali jste roli **üëî Zamƒõstnanec**.' },
                        { name: 'üöÄ Co d√°l?', value: 'M≈Ø≈æete nyn√≠ vyu≈æ√≠vat v≈°echny funkce urƒçen√© pro zamƒõstnance!' }
                    )
                    .setTimestamp();

                await user.send({ embeds: [dmEmbed] });
            } catch (dmError) {
                console.log('Nepoda≈ôilo se poslat DM u≈æivateli:', dmError.message);
                message.channel.send(`‚ö†Ô∏è U≈æivatel byl schv√°len, ale nepoda≈ôilo se mu poslat DM.`);
            }

            // Odstra≈à z aktivn√≠ch p≈ôihl√°≈°ek
            activeApplications.delete(targetUserId);

            // Zav≈ôi kan√°l za 10 sekund
            setTimeout(() => {
                message.channel.delete().catch(console.error);
            }, 10000);

        } catch (error) {
            console.error('Chyba p≈ôi schvalov√°n√≠:', error);
            message.reply('‚ùå Do≈°lo k chybƒõ p≈ôi schvalov√°n√≠ p≈ôihl√°≈°ky. Zkontrolujte opr√°vnƒõn√≠ bota.');
        }
    }

    if (message.content.startsWith('!zam√≠tnout') || message.content.startsWith('!zamitnout')) {
        // Zkontroluj admin opr√°vnƒõn√≠
        if (!message.member.roles.cache.has(CONFIG.ADMIN_ROLE_ID) && !message.member.permissions.has(PermissionFlagsBits.Administrator)) {
            message.reply('‚ùå Nem√°te opr√°vnƒõn√≠ k zam√≠t√°n√≠ p≈ôihl√°≈°ek!');
            return;
        }

        // Zkontroluj, jestli je to ticket kan√°l
        if (!message.channel.name.startsWith('p≈ôihl√°≈°ka-')) {
            message.reply('‚ùå Tento p≈ô√≠kaz lze pou≈æ√≠t pouze v kan√°lech s p≈ôihl√°≈°kami!');
            return;
        }

        const reason = message.content.split(' ').slice(1).join(' ') || 'Bez ud√°n√≠ d≈Øvodu';

        // Najdi u≈æivatele z aktivn√≠ch p≈ôihl√°≈°ek
        let targetUserId = null;
        
        for (const [userId, app] of activeApplications) {
            if (app.channelId === message.channel.id) {
                targetUserId = userId;
                break;
            }
        }

        if (!targetUserId) {
            message.reply('‚ùå Nepoda≈ôilo se naj√≠t u≈æivatele pro tuto p≈ôihl√°≈°ku.');
            return;
        }

        try {
            const user = await client.users.fetch(targetUserId);

            // Embed pro zam√≠tnut√≠
            const rejectedEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå P≈ôihl√°≈°ka zam√≠tnuta')
                .setDescription(`**${user.tag}** nebyl p≈ôijat do t√Ωmu.`)
                .addFields(
                    { name: 'üë®‚Äçüíº Zam√≠tl', value: message.author.tag, inline: true },
                    { name: 'üìÖ Datum', value: new Date().toLocaleString('cs-CZ'), inline: true },
                    { name: 'üìù D≈Øvod', value: reason, inline: false }
                )
                .setTimestamp();

            await message.channel.send({ embeds: [rejectedEmbed] });

            // Po≈°li DM u≈æivateli
            try {
                const dmEmbed = new EmbedBuilder()
                    .setColor('#ff0000')
                    .setTitle('üìã Rozhodnut√≠ o p≈ôihl√°≈°ce')
                    .setDescription(`Va≈°e p≈ôihl√°≈°ka na serveru **${message.guild.name}** byla zam√≠tnuta.`)
                    .addFields(
                        { name: 'üìù D≈Øvod', value: reason },
                        { name: 'üîÑ M≈Ø≈æete zkusit znovu?', value: 'Ano, m≈Ø≈æete podat novou p≈ôihl√°≈°ku pozdƒõji.' }
                    )
                    .setTimestamp();

                await user.send({ embeds: [dmEmbed] });
            } catch (dmError) {
                console.log('Nepoda≈ôilo se poslat DM u≈æivateli:', dmError.message);
            }

            // Odstra≈à z aktivn√≠ch p≈ôihl√°≈°ek
            activeApplications.delete(targetUserId);

            // Zav≈ôi kan√°l za 10 sekund
            setTimeout(() => {
                message.channel.delete().catch(console.error);
            }, 10000);

        } catch (error) {
            console.error('Chyba p≈ôi zam√≠t√°n√≠:', error);
            message.reply('‚ùå Do≈°lo k chybƒõ p≈ôi zam√≠t√°n√≠ p≈ôihl√°≈°ky.');
        }
    }
});

// ===== HANDLER PRO INTERAKCE S TLAƒå√çTKY A SLASH P≈ò√çKAZY =====
client.on('interactionCreate', async interaction => {
    // ===== MODAL SUBMISSIONS =====
    if (interaction.isModalSubmit()) {
        if (interaction.customId === 'zakazka_modal') {
            await interaction.deferReply({ ephemeral: true });

            const userId = interaction.fields.getTextInputValue('zakazka_user_id');
            const vlakCislo = interaction.fields.getTextInputValue('zakazka_vlak');
            const poznamka = interaction.fields.getTextInputValue('zakazka_poznamka') || 'Bez pozn√°mky';

            // Validace Discord ID
            if (!/^\d{17,19}$/.test(userId)) {
                await interaction.editReply({
                    content: '‚ùå Neplatn√© Discord ID! Mus√≠ b√Ωt 17-19 ƒç√≠slic.'
                });
                return;
            }

            // Validace ƒç√≠sla vlaku
            if (!/^\d+$/.test(vlakCislo)) {
                await interaction.editReply({
                    content: '‚ùå Neplatn√© ƒç√≠slo vlaku! Mus√≠ obsahovat pouze ƒç√≠slice.'
                });
                return;
            }

            try {
                // Zkontroluj, jestli u≈æivatel existuje
                const targetUser = await client.users.fetch(userId).catch(() => null);
                if (!targetUser) {
                    await interaction.editReply({
                        content: '‚ùå U≈æivatel s t√≠mto Discord ID nebyl nalezen!'
                    });
                    return;
                }

                // Zkontroluj, jestli je u≈æivatel na serveru
                const targetMember = await interaction.guild.members.fetch(userId).catch(() => null);
                if (!targetMember) {
                    await interaction.editReply({
                        content: '‚ùå U≈æivatel nen√≠ ƒçlenem tohoto serveru!'
                    });
                    return;
                }

                // Vytvo≈ô jedineƒçn√© ID pro zak√°zku
                const zakazkaId = `${Date.now()}-${vlakCislo}`;
                const channelName = `zak√°zka-${vlakCislo}-${targetUser.username}`.toLowerCase();

                // Vytvo≈ô kan√°l pro zak√°zku
                const zakazkaChannel = await interaction.guild.channels.create({
                    name: channelName,
                    type: ChannelType.GuildText,
                    parent: CONFIG.ZAKAZKY_CATEGORY_ID,
                    permissionOverwrites: [
                        {
                            id: interaction.guild.id, // @everyone
                            deny: [PermissionFlagsBits.ViewChannel],
                        },
                        {
                            id: userId, // P≈ôidƒõlen√Ω u≈æivatel
                            allow: [
                                PermissionFlagsBits.ViewChannel,
                                PermissionFlagsBits.SendMessages,
                                PermissionFlagsBits.ReadMessageHistory
                            ],
                        },
                        {
                            id: interaction.user.id, // V√Ωpravƒç√≠ kter√Ω vytvo≈ôil
                            allow: [
                                PermissionFlagsBits.ViewChannel,
                                PermissionFlagsBits.SendMessages,
                                PermissionFlagsBits.ReadMessageHistory
                            ],
                        },
                        {
                            id: CONFIG.ADMIN_ROLE_ID, // Admini
                            allow: [
                                PermissionFlagsBits.ViewChannel,
                                PermissionFlagsBits.SendMessages,
                                PermissionFlagsBits.ReadMessageHistory,
                                PermissionFlagsBits.ManageMessages
                            ],
                        },
                        {
                            id: CONFIG.VYPRAVCI_ROLE_ID, // V√Ωpravƒç√≠ role
                            allow: [
                                PermissionFlagsBits.ViewChannel,
                                PermissionFlagsBits.SendMessages,
                                PermissionFlagsBits.ReadMessageHistory
                            ],
                        },
                    ],
                });

                // Embed pro zak√°zkov√Ω kan√°l
                const zakazkaEmbed = new EmbedBuilder()
                    .setColor('#e67e22')
                    .setTitle('üöÇ Nov√° zak√°zka p≈ôidƒõlena!')
                    .setDescription(`Ahoj ${targetUser}! Byla v√°m p≈ôidƒõlena nov√° zak√°zka.`)
                    .addFields(
                        { name: 'üöÇ Vlak', value: vlakCislo, inline: true },
                        { name: 'üë®‚Äçüíº P≈ôidƒõlil', value: interaction.user.tag, inline: true },
                        { name: 'üìÖ Vytvo≈ôeno', value: new Date().toLocaleString('cs-CZ'), inline: true },
                        { name: 'üìù Pozn√°mka', value: poznamka, inline: false },
                        { name: 'üí° Instrukce', value: 'Po dokonƒçen√≠ j√≠zdy kliknƒõte na tlaƒç√≠tko "Dokonƒçit zak√°zku" n√≠≈æe.', inline: false }
                    )
                    .setFooter({ text: 'MultiCargo Doprava ‚Ä¢ Syst√©m zak√°zek' })
                    .setTimestamp();

                const completeButton = new ButtonBuilder()
                    .setCustomId(`complete_zakazka_${zakazkaId}`)
                    .setLabel('‚úÖ Dokonƒçit zak√°zku')
                    .setStyle(ButtonStyle.Success)
                    .setEmoji('üèÅ');

                const cancelButton = new ButtonBuilder()
                    .setCustomId(`cancel_zakazka_${zakazkaId}`)
                    .setLabel('‚ùå Zru≈°it zak√°zku')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üóëÔ∏è');

                const row = new ActionRowBuilder().addComponents(completeButton, cancelButton);

                await zakazkaChannel.send({ 
                    content: `${targetUser} ‚Ä¢ <@&${CONFIG.VYPRAVCI_ROLE_ID}>`,
                    embeds: [zakazkaEmbed], 
                    components: [row] 
                });

                // Ulo≈æ zak√°zku do mapy
                activeZakazky.set(zakazkaId, {
                    channelId: zakazkaChannel.id,
                    vypravci: interaction.user,
                    assignedUser: targetUser,
                    vlakCislo: vlakCislo,
                    poznamka: poznamka,
                    created: Date.now()
                });

                // Po≈°li DM u≈æivateli
                try {
                    const dmEmbed = new EmbedBuilder()
                        .setColor('#e67e22')
                        .setTitle('üöÇ Nov√° zak√°zka!')
                        .setDescription(`Byla v√°m p≈ôidƒõlena nov√° zak√°zka na serveru **${interaction.guild.name}**.`)
                        .addFields(
                            { name: 'üöÇ Vlak', value: vlakCislo },
                            { name: 'üë®‚Äçüíº P≈ôidƒõlil', value: interaction.user.tag },
                            { name: 'üìù Pozn√°mka', value: poznamka },
                            { name: 'üéØ Co d√°l?', value: `Pokraƒçujte v kan√°lu ${zakazkaChannel}` }
                        )
                        .setTimestamp();

                    await targetUser.send({ embeds: [dmEmbed] });
                } catch (dmError) {
                    console.log('Nepoda≈ôilo se poslat DM u≈æivateli:', dmError.message);
                }

                await interaction.editReply({
                    content: `‚úÖ Zak√°zka byla √∫spƒõ≈°nƒõ vytvo≈ôena! Kan√°l: ${zakazkaChannel}`
                });

            } catch (error) {
                console.error('Chyba p≈ôi vytv√°≈ôen√≠ zak√°zky:', error);
                await interaction.editReply({
                    content: '‚ùå Do≈°lo k chybƒõ p≈ôi vytv√°≈ôen√≠ zak√°zky. Zkontrolujte opr√°vnƒõn√≠ bota.'
                });
            }
        }
        return;
    }
    // ===== SLASH P≈ò√çKAZY =====
    if (interaction.isChatInputCommand()) {
        if (interaction.commandName === 'ozn√°men√≠') {
            // Zabr√°n√≠me duplicitn√≠mu zpracov√°n√≠
            await interaction.deferReply({ ephemeral: true });
            
            // Zkontroluj admin opr√°vnƒõn√≠
            if (!interaction.member.roles.cache.has(CONFIG.ADMIN_ROLE_ID) && !interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
                await interaction.editReply({
                    content: '‚ùå Nem√°te opr√°vnƒõn√≠ k pou≈æ√≠v√°n√≠ tohoto p≈ô√≠kazu!'
                });
                return;
            }

            const targetChannel = interaction.options.getChannel('kan√°l');
            const announcementText = interaction.options.getString('text');
            const color = interaction.options.getString('barva') || '#0099ff';

            try {
                // Vytvo≈ô hezk√Ω embed
                const announcementEmbed = new EmbedBuilder()
                    .setColor(color)
                    .setTitle('üì¢ Ozn√°men√≠')
                    .setDescription(announcementText)
                    .addFields(
                        { name: 'üë®‚Äçüíº Od', value: interaction.user.tag, inline: true },
                        { name: 'üìÖ Datum', value: new Date().toLocaleString('cs-CZ'), inline: true }
                    )
                    .setThumbnail(interaction.guild.iconURL())
                    .setFooter({ text: `Poslal ${interaction.user.tag}` })
                    .setTimestamp();

                // Po≈°li do vybran√©ho kan√°lu
                await targetChannel.send({ embeds: [announcementEmbed] });

                // Potvrzen√≠ adminovi
                await interaction.editReply({
                    content: `‚úÖ Ozn√°men√≠ bylo √∫spƒõ≈°nƒõ odesl√°no do kan√°lu ${targetChannel}!`
                });

            } catch (error) {
                console.error('Chyba p≈ôi odes√≠l√°n√≠ ozn√°men√≠:', error);
                await interaction.editReply({
                    content: '‚ùå Do≈°lo k chybƒõ p≈ôi odes√≠l√°n√≠ ozn√°men√≠. Zkontrolujte opr√°vnƒõn√≠ bota v c√≠lov√©m kan√°lu.'
                });
            }
        }

        if (interaction.commandName === 'setup-pozice') {
            await interaction.deferReply({ ephemeral: true });
            
            // Zkontroluj admin opr√°vnƒõn√≠
            if (!interaction.member.roles.cache.has(CONFIG.ADMIN_ROLE_ID) && !interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
                await interaction.editReply({
                    content: '‚ùå Nem√°te opr√°vnƒõn√≠ k pou≈æ√≠v√°n√≠ tohoto p≈ô√≠kazu!'
                });
                return;
            }

            const targetChannel = interaction.options.getChannel('kan√°l');

            try {
                const poziceEmbed = new EmbedBuilder()
                    .setColor('#4285f4')
                    .setTitle('üöÇ V√Ωbƒõr pozice ve firmƒõ')
                    .setDescription('**Vyberte si svou pozici v MultiCargo Doprava!**\n\nKliknƒõte na tlaƒç√≠tko n√≠≈æe pro v√Ωbƒõr nebo odebr√°n√≠ pozice.')
                    .addFields(
                        { name: 'üöÇ Strojv≈Ødce', value: '≈ò√≠d√≠te vlaky a zaji≈°≈•ujete p≈ôepravu n√°kladu', inline: true },
                        { name: 'üöâ V√Ωpravƒç√≠', value: 'Koordinujete provoz a dohl√≠≈æ√≠te na bezpeƒçnost', inline: true },
                        { name: 'üí° Pozn√°mka', value: 'M≈Ø≈æete m√≠t pouze jednu pozici souƒçasnƒõ. Kliknut√≠m na stejn√© tlaƒç√≠tko pozici odeberete.', inline: false }
                    )
                    .setThumbnail(interaction.guild.iconURL())
                    .setFooter({ text: 'MultiCargo Doprava ‚Ä¢ Syst√©m pozic' })
                    .setTimestamp();

                const strojvudceButton = new ButtonBuilder()
                    .setCustomId('pozice_strojvudce')
                    .setLabel('Strojv≈Ødce')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üöÇ');

                const vypravciButton = new ButtonBuilder()
                    .setCustomId('pozice_vypravci')
                    .setLabel('V√Ωpravƒç√≠')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üöâ');

                const row = new ActionRowBuilder().addComponents(strojvudceButton, vypravciButton);

                await targetChannel.send({ embeds: [poziceEmbed], components: [row] });
                
                await interaction.editReply({
                    content: `‚úÖ Syst√©m v√Ωbƒõru pozic byl √∫spƒõ≈°nƒõ nastaven v kan√°lu ${targetChannel}!`
                });

            } catch (error) {
                console.error('Chyba p≈ôi nastavov√°n√≠ pozic:', error);
                await interaction.editReply({
                    content: '‚ùå Do≈°lo k chybƒõ p≈ôi nastavov√°n√≠ syst√©mu pozic. Zkontrolujte opr√°vnƒõn√≠ bota.'
                });
            }
        }
    }

    // ===== TLAƒå√çTKA =====
    if (!interaction.isButton()) return;

    // Tlaƒç√≠tka pro v√Ωbƒõr pozic
    if (interaction.customId === 'pozice_strojvudce' || interaction.customId === 'pozice_vypravci') {
        await interaction.deferReply({ ephemeral: true });

        const member = interaction.member;
        const isStrojvudce = interaction.customId === 'pozice_strojvudce';
        const targetRoleId = isStrojvudce ? CONFIG.STROJVUDCE_ROLE_ID : CONFIG.VYPRAVCI_ROLE_ID;
        const otherRoleId = isStrojvudce ? CONFIG.VYPRAVCI_ROLE_ID : CONFIG.STROJVUDCE_ROLE_ID;
        const poziceNazev = isStrojvudce ? 'üöÇ Strojv≈Ødce' : 'üöâ V√Ωpravƒç√≠';
        const otherPoziceNazev = isStrojvudce ? 'üöâ V√Ωpravƒç√≠' : 'üöÇ Strojv≈Ødce';

        try {
            // Zkontroluj, jestli u≈æivatel u≈æ m√° tuto roli
            const hasTargetRole = member.roles.cache.has(targetRoleId);
            const hasOtherRole = member.roles.cache.has(otherRoleId);

            if (hasTargetRole) {
                // Odeber roli
                await member.roles.remove(targetRoleId);
                await interaction.editReply({
                    content: `‚úÖ Pozice **${poziceNazev}** byla odebr√°na!`
                });
            } else {
                // Odeber druhou pozici, pokud ji m√°
                if (hasOtherRole) {
                    await member.roles.remove(otherRoleId);
                }
                
                // P≈ôidej novou pozici
                await member.roles.add(targetRoleId);
                
                let message = `‚úÖ Byla v√°m p≈ôidƒõlena pozice **${poziceNazev}**!`;
                if (hasOtherRole) {
                    message += `\n(Pozice **${otherPoziceNazev}** byla automaticky odebr√°na)`;
                }
                
                await interaction.editReply({
                    content: message
                });
            }

        } catch (error) {
            console.error('Chyba p≈ôi zmƒõnƒõ pozice:', error);
            await interaction.editReply({
                content: '‚ùå Do≈°lo k chybƒõ p≈ôi zmƒõnƒõ pozice. Zkontrolujte opr√°vnƒõn√≠ bota.'
            });
        }
    }

    // Tlaƒç√≠tko pro pod√°n√≠ p≈ôihl√°≈°ky
    if (interaction.customId === 'apply_button') {
        const userId = interaction.user.id;

        // Okam≈æitƒõ odpovƒõz, aby se zabr√°nilo dvojit√©mu kliknut√≠
        await interaction.deferReply({ ephemeral: true });

        // Zkontroluj, jestli u≈æ u≈æivatel nem√° aktivn√≠ p≈ôihl√°≈°ku
        if (activeApplications.has(userId)) {
            await interaction.editReply({
                content: '‚è≥ U≈æ m√°te aktivn√≠ p≈ôihl√°≈°ku! Dokonƒçete ji nebo po≈æ√°dejte administr√°tora o uzav≈ôen√≠.'
            });
            return;
        }

        // Zkontroluj, jestli u≈æ existuje kan√°l s jeho jm√©nem
        const existingChannel = interaction.guild.channels.cache.find(
            channel => channel.name === `p≈ôihl√°≈°ka-${interaction.user.username}`
        );
        
        if (existingChannel) {
            await interaction.editReply({
                content: `‚ö†Ô∏è U≈æ m√°te aktivn√≠ p≈ôihl√°≈°ku v kan√°lu ${existingChannel}!`
            });
            return;
        }

        // Zkontroluj, jestli u≈æ nem√° roli zamƒõstnance
        const member = interaction.guild.members.cache.get(userId);
        if (member && member.roles.cache.has(CONFIG.EMPLOYEE_ROLE_ID)) {
            await interaction.editReply({
                content: '‚úÖ U≈æ jste ƒçlenem t√Ωmu! Nem≈Ø≈æete podat dal≈°√≠ p≈ôihl√°≈°ku.'
            });
            return;
        }

        // Doƒçasnƒõ p≈ôidej do mapy, aby se zabr√°nilo dvojit√©mu vytvo≈ôen√≠
        activeApplications.set(userId, { processing: true });

        try {
            // Vytvo≈ô priv√°tn√≠ kan√°l (ticket)
            const ticketChannel = await interaction.guild.channels.create({
                name: `p≈ôihl√°≈°ka-${interaction.user.username}`,
                type: ChannelType.GuildText,
                parent: CONFIG.CATEGORY_ID, // M≈Ø≈æete nastavit spr√°vnou kategorii
                permissionOverwrites: [
                    {
                        id: interaction.guild.id, // @everyone
                        deny: [PermissionFlagsBits.ViewChannel],
                    },
                    {
                        id: userId, // ≈Ωadatel
                        allow: [
                            PermissionFlagsBits.ViewChannel,
                            PermissionFlagsBits.SendMessages,
                            PermissionFlagsBits.ReadMessageHistory
                        ],
                    },
                    {
                        id: CONFIG.ADMIN_ROLE_ID, // Admini
                        allow: [
                            PermissionFlagsBits.ViewChannel,
                            PermissionFlagsBits.SendMessages,
                            PermissionFlagsBits.ReadMessageHistory,
                            PermissionFlagsBits.ManageMessages
                        ],
                    },
                ],
            });

            // Embed pro ticket kan√°l
            const ticketEmbed = new EmbedBuilder()
                .setColor('#ffcc00')
                .setTitle('üìã Va≈°e p≈ôihl√°≈°ka')
                .setDescription(`Ahoj ${interaction.user}! V√≠tejte v syst√©mu p≈ôihl√°≈°ek.\n\n**Napi≈°te pros√≠m svou p≈ôihl√°≈°ku do tohoto kan√°lu:**\n‚Ä¢ Proƒç se chcete p≈ôipojit k na≈°emu t√Ωmu?\n‚Ä¢ Jak√© m√°te zku≈°enosti se SimRail?\n‚Ä¢ Jak ƒçasto hrajete?`)
                .addFields(
                    { name: '‚è∞ Co se stane d√°l?', value: 'Administr√°to≈ôi si va≈°i p≈ôihl√°≈°ku p≈ôeƒçtou a rozhodnou o p≈ôijet√≠.', inline: false },
                    { name: 'üéØ Tipy pro √∫spƒõ≈°nou p≈ôihl√°≈°ku', value: '‚Ä¢ Buƒète up≈ô√≠mn√≠ a konkr√©tn√≠\n‚Ä¢ Popi≈°te sv√© zku≈°enosti\n‚Ä¢ Uveƒète, jak m≈Ø≈æete p≈ôispƒõt t√Ωmu', inline: false }
                )
                .setFooter({ text: 'Pro schv√°len√≠/zam√≠tnut√≠ pou≈æijte: !schv√°lit nebo !zam√≠tnout' })
                .setTimestamp();

            const closeButton = new ButtonBuilder()
                .setCustomId('close_ticket')
                .setLabel('üóëÔ∏è Zav≈ô√≠t p≈ôihl√°≈°ku')
                .setStyle(ButtonStyle.Danger);

            const row = new ActionRowBuilder().addComponents(closeButton);

            await ticketChannel.send({ 
                content: `${interaction.user} ‚Ä¢ <@&${CONFIG.ADMIN_ROLE_ID}>`,
                embeds: [ticketEmbed], 
                components: [row] 
            });

            // Ulo≈æ spr√°vn√© data p≈ôihl√°≈°ky do mapy
            activeApplications.set(userId, {
                channelId: ticketChannel.id,
                user: interaction.user,
                timestamp: Date.now()
            });

            await interaction.editReply({
                content: `‚úÖ P≈ôihl√°≈°ka vytvo≈ôena! Pokraƒçujte v kan√°lu ${ticketChannel}`
            });

        } catch (error) {
            console.error('Chyba p≈ôi vytv√°≈ôen√≠ ticket kan√°lu:', error);
            // Odstra≈à z mapy pokud nastala chyba
            activeApplications.delete(userId);
            
            await interaction.editReply({
                content: '‚ùå Do≈°lo k chybƒõ p≈ôi vytv√°≈ôen√≠ p≈ôihl√°≈°ky. Kontaktujte administr√°tora.'
            });
        }
    }

    // Tlaƒç√≠tko pro vytvo≈ôen√≠ zak√°zky
    if (interaction.customId === 'create_zakazka') {
        // Zkontroluj opr√°vnƒõn√≠ v√Ωpravƒç√≠
        if (!interaction.member.roles.cache.has(CONFIG.VYPRAVCI_ROLE_ID) && 
            !interaction.member.roles.cache.has(CONFIG.ADMIN_ROLE_ID) && 
            !interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
            await interaction.reply({
                content: '‚ùå Nem√°te opr√°vnƒõn√≠ k vytv√°≈ôen√≠ zak√°zek! Tento p≈ô√≠kaz mohou pou≈æ√≠vat pouze v√Ωpravƒç√≠.',
                ephemeral: true
            });
            return;
        }

        // Vytvo≈ô modal formul√°≈ô
        const modal = new ModalBuilder()
            .setCustomId('zakazka_modal')
            .setTitle('üöÇ Nov√° zak√°zka pro strojv≈Ødce');

        // Input pro Discord ID
        const userIdInput = new TextInputBuilder()
            .setCustomId('zakazka_user_id')
            .setLabel('Discord ID u≈æivatele')
            .setPlaceholder('Nap≈ô√≠klad: 123456789012345678')
            .setStyle(TextInputStyle.Short)
            .setRequired(true)
            .setMaxLength(20);

        // Input pro ƒç√≠slo vlaku
        const vlakInput = new TextInputBuilder()
            .setCustomId('zakazka_vlak')
            .setLabel('ƒå√≠slo vlaku')
            .setPlaceholder('Nap≈ô√≠klad: 24111')
            .setStyle(TextInputStyle.Short)
            .setRequired(true)
            .setMaxLength(10);

        // Input pro pozn√°mku (voliteln√©)
        const poznamkaInput = new TextInputBuilder()
            .setCustomId('zakazka_poznamka')
            .setLabel('Pozn√°mka k zak√°zce (voliteln√©)')
            .setPlaceholder('Nap≈ô√≠klad: D≈Øle≈æit√° p≈ôeprava, pozor na zpo≈ædƒõn√≠...')
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(false)
            .setMaxLength(500);

        const firstRow = new ActionRowBuilder().addComponents(userIdInput);
        const secondRow = new ActionRowBuilder().addComponents(vlakInput);
        const thirdRow = new ActionRowBuilder().addComponents(poznamkaInput);

        modal.addComponents(firstRow, secondRow, thirdRow);

        await interaction.showModal(modal);
    }

    // Tlaƒç√≠tka pro dokonƒçen√≠/zru≈°en√≠ zak√°zky
    if (interaction.customId.startsWith('complete_zakazka_') || interaction.customId.startsWith('cancel_zakazka_')) {
        const zakazkaId = interaction.customId.split('_').slice(2).join('_');
        const isComplete = interaction.customId.startsWith('complete_zakazka_');
        
        await interaction.deferReply({ ephemeral: true });

        // Najdi zak√°zku
        const zakazka = activeZakazky.get(zakazkaId);
        if (!zakazka) {
            await interaction.editReply({
                content: '‚ùå Zak√°zka nebyla nalezena nebo ji≈æ byla dokonƒçena.'
            });
            return;
        }

        // Zkontroluj opr√°vnƒõn√≠
        const isAssignedUser = interaction.user.id === zakazka.assignedUser.id;
        const isVypravci = interaction.member.roles.cache.has(CONFIG.VYPRAVCI_ROLE_ID);
        const isAdmin = interaction.member.roles.cache.has(CONFIG.ADMIN_ROLE_ID) || 
                       interaction.member.permissions.has(PermissionFlagsBits.Administrator);

        if (!isAssignedUser && !isVypravci && !isAdmin) {
            await interaction.editReply({
                content: '‚ùå Nem√°te opr√°vnƒõn√≠ k t√©to akci!'
            });
            return;
        }

        try {
            const channel = interaction.channel;
            
            if (isComplete) {
                // Dokonƒçen√≠ zak√°zky
                await interaction.editReply({
                    content: '‚úÖ Zak√°zka byla oznaƒçena jako dokonƒçen√°! Kan√°l bude uzav≈ôen za 10 sekund...'
                });

                // Vytvo≈ô log kan√°l
                const logChannelName = `log-${zakazka.vlakCislo}-${zakazka.assignedUser.username}`.toLowerCase();
                const logChannel = await interaction.guild.channels.create({
                    name: logChannelName,
                    type: ChannelType.GuildText,
                    parent: CONFIG.ZAKAZKY_LOG_CATEGORY_ID,
                    permissionOverwrites: [
                        {
                            id: interaction.guild.id, // @everyone
                            deny: [PermissionFlagsBits.ViewChannel],
                        },
                        {
                            id: CONFIG.ADMIN_ROLE_ID, // Admini
                            allow: [
                                PermissionFlagsBits.ViewChannel,
                                PermissionFlagsBits.SendMessages,
                                PermissionFlagsBits.ReadMessageHistory
                            ],
                        },
                        {
                            id: CONFIG.VYPRAVCI_ROLE_ID, // V√Ωpravƒç√≠
                            allow: [
                                PermissionFlagsBits.ViewChannel,
                                PermissionFlagsBits.SendMessages,
                                PermissionFlagsBits.ReadMessageHistory
                            ],
                        },
                    ],
                });

                // Log embed
                const logEmbed = new EmbedBuilder()
                    .setColor('#27ae60')
                    .setTitle('‚úÖ Zak√°zka dokonƒçena')
                    .addFields(
                        { name: 'üöÇ Vlak', value: zakazka.vlakCislo, inline: true },
                        { name: 'üë®‚Äçüíº P≈ôidƒõlil', value: zakazka.vypravci.tag, inline: true },
                        { name: 'üèÅ Dokonƒçil', value: interaction.user.tag, inline: true },
                        { name: 'üìÖ Vytvo≈ôeno', value: new Date(zakazka.created).toLocaleString('cs-CZ'), inline: true },
                        { name: '‚úÖ Dokonƒçeno', value: new Date().toLocaleString('cs-CZ'), inline: true },
                        { name: '‚è±Ô∏è Doba trv√°n√≠', value: `${Math.round((Date.now() - zakazka.created) / (1000 * 60))} minut`, inline: true },
                        { name: 'üìù Pozn√°mka', value: zakazka.poznamka, inline: false }
                    )
                    .setFooter({ text: 'MultiCargo Doprava ‚Ä¢ Archiv zak√°zek' })
                    .setTimestamp();

                await logChannel.send({ embeds: [logEmbed] });

                // Po≈°li DM s potvrzen√≠m
                try {
                    const completionDmEmbed = new EmbedBuilder()
                        .setColor('#27ae60')
                        .setTitle('‚úÖ Zak√°zka dokonƒçena!')
                        .setDescription(`Va≈°e zak√°zka pro vlak **${zakazka.vlakCislo}** byla oznaƒçena jako dokonƒçen√°.`)
                        .addFields(
                            { name: 'üèÅ Dokonƒçeno', value: new Date().toLocaleString('cs-CZ') },
                            { name: 'üìã Archiv', value: `Z√°znam ulo≈æen v kan√°lu ${logChannel}` }
                        )
                        .setTimestamp();

                    await zakazka.assignedUser.send({ embeds: [completionDmEmbed] });
                } catch (dmError) {
                    console.log('Nepoda≈ôilo se poslat DM o dokonƒçen√≠:', dmError.message);
                }

            } else {
                // Zru≈°en√≠ zak√°zky
                await interaction.editReply({
                    content: '‚ùå Zak√°zka byla zru≈°ena! Kan√°l bude uzav≈ôen za 10 sekund...'
                });

                // Po≈°li DM o zru≈°en√≠
                try {
                    const cancelDmEmbed = new EmbedBuilder()
                        .setColor('#e74c3c')
                        .setTitle('‚ùå Zak√°zka zru≈°ena')
                        .setDescription(`Va≈°e zak√°zka pro vlak **${zakazka.vlakCislo}** byla zru≈°ena.`)
                        .addFields(
                            { name: 'üóëÔ∏è Zru≈°il', value: interaction.user.tag },
                            { name: 'üìÖ Zru≈°eno', value: new Date().toLocaleString('cs-CZ') }
                        )
                        .setTimestamp();

                    await zakazka.assignedUser.send({ embeds: [cancelDmEmbed] });
                } catch (dmError) {
                    console.log('Nepoda≈ôilo se poslat DM o zru≈°en√≠:', dmError.message);
                }
            }

            // Odstra≈à z aktivn√≠ch zak√°zek
            activeZakazky.delete(zakazkaId);

            // Zav≈ôi kan√°l za 10 sekund
            setTimeout(() => {
                channel.delete().catch(console.error);
            }, 10000);

        } catch (error) {
            console.error('Chyba p≈ôi dokonƒçov√°n√≠/ru≈°en√≠ zak√°zky:', error);
            await interaction.editReply({
                content: '‚ùå Do≈°lo k chybƒõ p≈ôi zpracov√°n√≠ zak√°zky.'
            });
        }
    }

    // Tlaƒç√≠tko pro zav≈ôen√≠ ticketu
    if (interaction.customId === 'close_ticket') {
        const channel = interaction.channel;
        
        // Zkontroluj opr√°vnƒõn√≠ (admin nebo vlastn√≠k ticketu)
        const isAdmin = interaction.member.roles.cache.has(CONFIG.ADMIN_ROLE_ID) || 
                       interaction.member.permissions.has(PermissionFlagsBits.Administrator);
        const isOwner = channel.name.includes(interaction.user.username);

        if (!isAdmin && !isOwner) {
            await interaction.reply({
                content: '‚ùå Nem√°te opr√°vnƒõn√≠ k zav≈ôen√≠ t√©to p≈ôihl√°≈°ky!',
                ephemeral: true
            });
            return;
        }

        await interaction.reply('üóëÔ∏è Kan√°l bude uzav≈ôen za 5 sekund...');
        
        setTimeout(() => {
            // Odstra≈à z mapy
            for (const [userId, app] of activeApplications) {
                if (app.channelId === channel.id) {
                    activeApplications.delete(userId);
                    break;
                }
            }
            
            channel.delete().catch(console.error);
        }, 5000);
    }
});

client.login(process.env.DISCORD_TOKEN);
